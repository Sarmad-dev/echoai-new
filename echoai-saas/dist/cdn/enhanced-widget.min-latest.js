/*!
 * EchoAI Enhanced Widget v1.0.0
 * Built: 2025-09-11T18:42:38.183Z
 * License: MIT
 * 
 * This is a minified build.
 * For documentation and integration guides, visit: https://docs.echoai.com
 */

(function(){"use strict";class StateManager{constructor(){this.state={isOpen: false,activeTab: "chat",isLoading: false,isStreaming: false,conversationId: null,messages: [],conversationStatus: "AI_HANDLING",proactiveQuestions: [],suggestedTopics: [],conversationActions: [],intelligenceMetadata: null,realtimeConnected: false,realtimeError: null,faqs: [],conversationHistory: [],showEscalationDialog: false,showLeadCollection: false,escalationReason: "",leadCollectionData:{},};this.listeners=new Map();}getState(){return{...this.state};}setState(updates){const prevState={...this.state};this.state={...this.state,...updates};this.notifyListeners(prevState,this.state);}subscribe(key,callback){if(!this.listeners.has(key)){this.listeners.set(key,[]);}this.listeners.get(key).push(callback);return()=>{const callbacks=this.listeners.get(key);if(callbacks){const index=callbacks.indexOf(callback);if(index>-1){callbacks.splice(index,1);}}};}notifyListeners(prevState,newState){this.listeners.forEach((callbacks,key)=>{if(prevState[key]!==newState[key]){callbacks.forEach((callback)=>callback(newState[key],prevState[key]));}});}}class EventManager{constructor(){this.eventListeners=new Map();this.customEventListeners=new Map();}addEventListener(element,event,handler,options={}){const key=`${element.id||"element"}-${event}`;if(!this.eventListeners.has(key)){this.eventListeners.set(key,[]);}const listenerInfo={element,event,handler,options};this.eventListeners.get(key).push(listenerInfo);element.addEventListener(event,handler,options);return()=>this.removeEventListener(element,event,handler);}removeEventListener(element,event,handler){element.removeEventListener(event,handler);const key=`${element.id||"element"}-${event}`;const listeners=this.eventListeners.get(key);if(listeners){const index=listeners.findIndex((l)=>l.handler===handler);if(index>-1){listeners.splice(index,1);}}}emit(eventName,data){const listeners=this.customEventListeners.get(eventName);if(listeners){listeners.forEach((callback)=>callback(data));}}on(eventName,callback){if(!this.customEventListeners.has(eventName)){this.customEventListeners.set(eventName,[]);}this.customEventListeners.get(eventName).push(callback);return()=>{const callbacks=this.customEventListeners.get(eventName);if(callbacks){const index=callbacks.indexOf(callback);if(index>-1){callbacks.splice(index,1);}}};}cleanup(){this.eventListeners.forEach((listeners)=>{listeners.forEach(({element,event,handler})=>{element.removeEventListener(event,handler);});});this.eventListeners.clear();this.customEventListeners.clear();}}class APIClient{constructor(config){this.config=config;this.abortControllers=new Map();}async request(endpoint,options={}){const url=endpoint.startsWith("http")? endpoint : `${this.config.apiUrl.replace("/api/enhanced-chat/widget","")}${endpoint}`;const defaultOptions={headers:{"Content-Type": "application/json",...options.headers,},};const response=await fetch(url,{...defaultOptions,...options});if(!response.ok){throw new Error(`HTTP ${response.status}: ${response.statusText}`);}return response;}async sendMessage(message,imageUrl,streaming=false){const body={message,apiKey: this.config.apiKey,chatbotId: this.config.chatbotId,sessionId: this.sessionId,imageUrl,stream: streaming,};if(streaming){const abortController=new AbortController();this.abortControllers.set("streaming",abortController);return this.request("/api/enhanced-chat/widget",{method: "POST",body: JSON.stringify(body),signal: abortController.signal,});}else{const response=await this.request("/api/enhanced-chat/widget",{method: "POST",body: JSON.stringify(body),});return response.json();}}async sendStreamingMessage(message,imageUrl){const abortController=new AbortController();this.abortControllers.set("streaming",abortController);try{const body={message,apiKey: this.config.apiKey,chatbotId: this.config.chatbotId,sessionId: this.sessionId,imageUrl,stream: true,};const response=await this.request("/api/enhanced-chat/widget",{method: "POST",body: JSON.stringify(body),signal: abortController.signal,headers:{"Content-Type": "application/json",Accept: "text/event-stream",},});if(!response.ok){throw new Error(`HTTP ${response.status}: ${response.statusText}`);}return response;}catch(error){this.abortControllers.delete("streaming");throw error;}}async createStreamingConnection(message,imageUrl,onToken,onEnhancedData,onComplete,onError){try{const response=await this.sendStreamingMessage(message,imageUrl);await this.processStreamingResponse(response,onToken,onEnhancedData,onComplete,onError);}catch(error){if(error.name==="AbortError"){console.log("EchoAI: Streaming cancelled by user");onError(new Error("Streaming cancelled"));}else{console.error("EchoAI: Streaming connection error:",error);onError(error);}}}async processStreamingResponse(response,onToken,onEnhancedData,onComplete,onError){const reader=response.body.getReader();const decoder=new TextDecoder();let buffer="";let heartbeatTimeout;let lastActivity=Date.now();const HEARTBEAT_INTERVAL=30000;const resetHeartbeat=()=>{clearTimeout(heartbeatTimeout);lastActivity=Date.now();heartbeatTimeout=setTimeout(()=>{if(Date.now()-lastActivity>HEARTBEAT_INTERVAL){onError(new Error("Streaming connection timeout"));}},HEARTBEAT_INTERVAL);};resetHeartbeat();try{while(true){const{done,value}=await reader.read();if(done){clearTimeout(heartbeatTimeout);break;}resetHeartbeat();buffer+=decoder.decode(value,{stream: true});const lines=buffer.split("\n");buffer=lines.pop()||"";for(const line of lines){if(line.trim()==="")continue;if(line.startsWith("data: ")){try{const jsonData=line.slice(6).trim();if(jsonData==="[DONE]"){onComplete();return;}const data=JSON.parse(jsonData);if(data.token){onToken(data.token);}else if(data.enhanced_data){onEnhancedData(data.enhanced_data);}else if(data.done){onComplete();return;}else if(data.error){onError(new Error(data.error));return;}}catch(e){console.warn("EchoAI: Invalid JSON in stream:",line,e);}}else if(line.startsWith("event: ")){const eventType=line.slice(7).trim();if(eventType==="error"){onError(new Error("Server sent error event"));return;}}}}}catch(error){clearTimeout(heartbeatTimeout);if(error.name==="AbortError"){console.log("EchoAI: Streaming cancelled by user");}else{console.error("EchoAI: Streaming processing error:",error);onError(error);}}finally{clearTimeout(heartbeatTimeout);this.abortControllers.delete("streaming");}}async uploadImage(file,onProgress=null){const formData=new FormData();formData.append("image",file);return new Promise((resolve,reject)=>{const xhr=new XMLHttpRequest();if(onProgress){xhr.upload.addEventListener("progress",(e)=>{if(e.lengthComputable){const percentComplete=(e.loaded/e.total)*100;onProgress(percentComplete);}});}xhr.addEventListener("load",()=>{if(xhr.status>=200&&xhr.status<300){try{const response=JSON.parse(xhr.responseText);resolve(response);}catch(error){reject(new Error("Invalid JSON response"));}}else{reject(new Error(`HTTP ${xhr.status}: ${xhr.statusText}`));}});xhr.addEventListener("error",()=>{reject(new Error("Network error during upload"));});xhr.addEventListener("timeout",()=>{reject(new Error("Upload timeout"));});const url="/api/upload/image".startsWith("http")? "/api/upload/image" : `${this.config.apiUrl.replace("/api/enhanced-chat/widget","")}/api/upload/image`;xhr.open("POST",url);xhr.timeout=30000;xhr.send(formData);});}async initializeSession(){const response=await this.request("/api/chat/session",{method: "POST",body: JSON.stringify({chatbotId: this.config.chatbotId,externalUserEmail: "widget-user@example.com",}),});const data=await response.json();this.sessionId=data.sessionId;return data.sessionId;}async loadFAQs(){const response=await this.request(`/api/faq?chatbotId=${this.config.chatbotId}`);return response.json();}async trackFAQUsage(faqId){try{const response=await this.request("/api/faq/track-usage",{method: "POST",body: JSON.stringify({faqId: faqId,chatbotId: this.config.chatbotId,timestamp: new Date().toISOString(),}),});return response.json();}catch(error){console.debug("EchoAI: FAQ usage tracking failed:",error);return null;}}async loadConversationHistory(page=1,limit=20,search=''){const params=new URLSearchParams({userEmail: 'preview@example.com',page: page.toString(),limit: limit.toString(),});if(search){params.append('search',search);}const response=await this.request(`http: return response.json();}async loadConversation(sessionId){const response=await this.request(`/api/chat/session/${sessionId}`);return response.json();}async loadChatbotSettings(){const apiUrl=this.config.apiUrl.replace("/api/enhanced-chat/widget","/api/public/chatbots/"+this.config.chatbotId);const response=await this.request(apiUrl);return response.json();}async escalate(conversationId,reason){return this.request("/api/escalation",{method: "POST",body: JSON.stringify({conversation_id: conversationId,chatbot_id: this.config.chatbotId,escalation_type: reason,reason: reason,}),});}cancelStreaming(){const controller=this.abortControllers.get("streaming");if(controller){controller.abort();this.abortControllers.delete("streaming");}}cleanup(){this.abortControllers.forEach((controller)=>controller.abort());this.abortControllers.clear();}}class RealtimeManager{constructor(config,stateManager,eventManager){this.config=config;this.stateManager=stateManager;this.eventManager=eventManager;this.connection=null;this.connectionType=null;this.isConnected=false;this.reconnectAttempts=0;this.maxReconnectAttempts=10;this.reconnectDelay=1000;this.maxReconnectDelay=30000;this.heartbeatInterval=null;this.heartbeatTimeout=null;this.lastHeartbeat=null;this.pendingMessages=new Map();this.messageDeliveryTimeout=10000;this.conversationStatus="AI_HANDLING";this.statusUpdateCallbacks=new Set();this.initializeConnection();}async initializeConnection(){try{if(this.supportsWebSocket()){await this.connectWebSocket();}else{await this.connectServerSentEvents();}}catch(error){console.error("EchoAI: Failed to initialize realtime connection:",error);this.handleConnectionError(error);}}supportsWebSocket(){return(typeof WebSocket!=="undefined"&&WebSocket.CLOSING!==undefined);}async connectWebSocket(){try{const wsUrl=this.getWebSocketUrl();this.connection=new WebSocket(wsUrl);this.connectionType="websocket";this.connection.onopen=()=>{console.log("EchoAI: WebSocket connected");this.handleConnectionOpen();};this.connection.onmessage=(event)=>{this.handleMessage(event.data);};this.connection.onclose=(event)=>{console.log("EchoAI: WebSocket closed:",event.code,event.reason);this.handleConnectionClose(event);};this.connection.onerror=(error)=>{console.error("EchoAI: WebSocket error:",error);this.handleConnectionError(error);};}catch(error){console.error("EchoAI: WebSocket connection failed:",error);throw error;}}async connectServerSentEvents(){try{const sseUrl=this.getServerSentEventsUrl();this.connection=new EventSource(sseUrl);this.connectionType="sse";this.connection.onopen=()=>{console.log("EchoAI: Server-Sent Events connected");this.handleConnectionOpen();};this.connection.onmessage=(event)=>{this.handleMessage(event.data);};this.connection.onerror=(error)=>{console.error("EchoAI: Server-Sent Events error:",error);this.handleConnectionError(error);};this.connection.addEventListener("message",(event)=>{this.handleRealtimeMessage(JSON.parse(event.data));});this.connection.addEventListener("status",(event)=>{this.handleStatusUpdate(JSON.parse(event.data));});this.connection.addEventListener("heartbeat",(event)=>{this.handleHeartbeat();});}catch(error){console.error("EchoAI: Server-Sent Events connection failed:",error);throw error;}}getWebSocketUrl(){const baseUrl=this.config.apiUrl.replace(/^https?:\/\ const protocol=window.location.protocol==="https:" ? "wss:" : "ws:";return `${protocol}}getServerSentEventsUrl(){const baseUrl=this.config.apiUrl.replace("/api/enhanced-chat/widget","");return `${baseUrl}/api/realtime/events?chatbotId=${this.config.chatbotId}&apiKey=${this.config.apiKey}`;}handleConnectionOpen(){this.isConnected=true;this.reconnectAttempts=0;this.reconnectDelay=1000;this.stateManager.setState({realtimeConnected: true,realtimeError: null,});this.startHeartbeat();this.eventManager.emit("realtime-connected",{connectionType: this.connectionType,});this.authenticateConnection();}handleConnectionClose(event){this.isConnected=false;this.stopHeartbeat();this.stateManager.setState({realtimeConnected: false,realtimeError: event.reason||"Connection closed",});this.eventManager.emit("realtime-disconnected",{code: event.code,reason: event.reason,});if(event.code!==1000&&this.reconnectAttempts<this.maxReconnectAttempts){this.scheduleReconnect();}}handleConnectionError(error){this.isConnected=false;this.stopHeartbeat();this.stateManager.setState({realtimeConnected: false,realtimeError: error.message||"Connection error",});this.eventManager.emit("realtime-error",{error});if(this.reconnectAttempts<this.maxReconnectAttempts){this.scheduleReconnect();}}scheduleReconnect(){this.reconnectAttempts++;const jitter=Math.random()*1000;const delay=Math.min(this.reconnectDelay*Math.pow(2,this.reconnectAttempts-1)+jitter,this.maxReconnectDelay);console.log(`EchoAI: Scheduling reconnect attempt ${this.reconnectAttempts}in ${Math.round(delay)}ms`);setTimeout(()=>{if(!this.isConnected){this.initializeConnection();}},delay);}handleMessage(data){try{const message=typeof data==="string" ? JSON.parse(data): data;switch(message.type){case "message": this.handleRealtimeMessage(message);break;case "status": this.handleStatusUpdate(message);break;case "delivery_confirmation": this.handleDeliveryConfirmation(message);break;case "heartbeat": this.handleHeartbeat();break;case "error": this.handleServerError(message);break;default: console.warn("EchoAI: Unknown message type:",message.type);}}catch(error){console.error("EchoAI: Error parsing realtime message:",error);}}handleRealtimeMessage(message){if(window.EchoAI&&window.EchoAI.uiManager){const messageId=window.EchoAI.uiManager.addMessage(message.content,message.role||"agent",message.imageUrl,{id: message.id,timestamp: new Date(message.createdAt),status: "delivered",metadata: message.metadata,});this.sendDeliveryConfirmation(message.id);this.eventManager.emit("message-received",{message: message,messageId: messageId,});}}handleStatusUpdate(statusData){const previousStatus=this.conversationStatus;this.conversationStatus=statusData.status;this.stateManager.setState({conversationStatus: statusData.status,});this.updateConversationStatusUI(statusData.status,statusData);this.statusUpdateCallbacks.forEach((callback)=>{try{callback(statusData.status,previousStatus,statusData);}catch(error){console.error("EchoAI: Error in status update callback:",error);}});this.eventManager.emit("conversation-status-changed",{status: statusData.status,previousStatus: previousStatus,data: statusData,});}handleDeliveryConfirmation(confirmation){const messageId=confirmation.messageId;if(this.pendingMessages.has(messageId)){clearTimeout(this.pendingMessages.get(messageId).timeout);this.pendingMessages.delete(messageId);this.updateMessageStatus(messageId,"delivered");this.eventManager.emit("message-delivered",{messageId});}}handleHeartbeat(){this.lastHeartbeat=Date.now();if(this.heartbeatTimeout){clearTimeout(this.heartbeatTimeout);}this.heartbeatTimeout=setTimeout(()=>{console.warn("EchoAI: Heartbeat timeout,connection may be lost");this.handleConnectionError(new Error("Heartbeat timeout"));},35000);}handleServerError(errorMessage){console.error("EchoAI: Server error:",errorMessage);this.stateManager.setState({realtimeError: errorMessage.message||"Server error",});this.eventManager.emit("realtime-server-error",{error: errorMessage});}startHeartbeat(){this.heartbeatInterval=setInterval(()=>{if(this.isConnected){this.sendHeartbeat();}},30000);}stopHeartbeat(){if(this.heartbeatInterval){clearInterval(this.heartbeatInterval);this.heartbeatInterval=null;}if(this.heartbeatTimeout){clearTimeout(this.heartbeatTimeout);this.heartbeatTimeout=null;}}sendHeartbeat(){if(this.isConnected&&this.connection){const heartbeat={type: "heartbeat",timestamp: Date.now(),};try{if(this.connectionType==="websocket"){this.connection.send(JSON.stringify(heartbeat));}}catch(error){console.error("EchoAI: Error sending heartbeat:",error);}}}authenticateConnection(){if(this.isConnected&&this.connection){const authMessage={type: "authenticate",apiKey: this.config.apiKey,chatbotId: this.config.chatbotId,conversationId: this.stateManager.getState().conversationId,};try{if(this.connectionType==="websocket"){this.connection.send(JSON.stringify(authMessage));}}catch(error){console.error("EchoAI: Error authenticating connection:",error);}}}sendDeliveryConfirmation(messageId){if(this.isConnected&&this.connection){const confirmation={type: "delivery_confirmation",messageId: messageId,timestamp: Date.now(),};try{if(this.connectionType==="websocket"){this.connection.send(JSON.stringify(confirmation));}}catch(error){console.error("EchoAI: Error sending delivery confirmation:",error);}}}trackMessageDelivery(messageId){const timeout=setTimeout(()=>{console.warn(`EchoAI: Message ${messageId}delivery timeout`);this.updateMessageStatus(messageId,"failed");this.pendingMessages.delete(messageId);this.eventManager.emit("message-delivery-failed",{messageId});},this.messageDeliveryTimeout);this.pendingMessages.set(messageId,{timeout: timeout,timestamp: Date.now(),});this.updateMessageStatus(messageId,"pending");}updateMessageStatus(messageId,status){if(window.EchoAI&&window.EchoAI.uiManager){const messageElement=document.querySelector(`[data-message-id="${messageId}"]`);if(messageElement){messageElement.classList.remove("echoai-message-pending","echoai-message-delivered","echoai-message-failed");messageElement.classList.add(`echoai-message-${status}`);const statusElement=messageElement.querySelector(".echoai-message-status");if(statusElement){statusElement.innerHTML=window.EchoAI.uiManager.getStatusIcon(status);statusElement.setAttribute("aria-label",`Message ${status}`);}}}}updateConversationStatusUI(status,statusData){if(window.EchoAI&&window.EchoAI.uiManager){window.EchoAI.uiManager.updateConversationStatus(status,statusData);}}onStatusUpdate(callback){this.statusUpdateCallbacks.add(callback);return()=>{this.statusUpdateCallbacks.delete(callback);};}getCurrentStatus(){return this.conversationStatus;}isHumanAgentActive(){return this.conversationStatus==="AWAITING_HUMAN_RESPONSE";}isConversationResolved(){return this.conversationStatus==="RESOLVED";}disconnect(){if(this.connection){this.isConnected=false;this.stopHeartbeat();if(this.connectionType==="websocket"){this.connection.close(1000,"Client disconnect");}else if(this.connectionType==="sse"){this.connection.close();}this.connection=null;}}reconnect(){this.disconnect();this.reconnectAttempts=0;this.initializeConnection();}getConnectionStatus(){return{isConnected: this.isConnected,connectionType: this.connectionType,reconnectAttempts: this.reconnectAttempts,lastHeartbeat: this.lastHeartbeat,conversationStatus: this.conversationStatus,};}cleanup(){this.disconnect();this.statusUpdateCallbacks.clear();this.pendingMessages.forEach(({timeout})=>clearTimeout(timeout));this.pendingMessages.clear();}}class ThemeManager{constructor(config){this.config=config;this.cssVariables=new Map();this.initializeTheme();}initializeTheme(){this.setCSSVariable("--echoai-primary-color",this.config.primaryColor||"#3b82f6");this.setCSSVariable("--echoai-primary-hover",this.lightenColor(this.config.primaryColor||"#3b82f6",-10));this.setCSSVariable("--echoai-primary-light",this.lightenColor(this.config.primaryColor||"#3b82f6",90));this.setCSSVariable("--echoai-text-primary","#374151");this.setCSSVariable("--echoai-text-secondary","#6b7280");this.setCSSVariable("--echoai-text-muted","#9ca3af");this.setCSSVariable("--echoai-background","#ffffff");this.setCSSVariable("--echoai-background-secondary","#f8fafc");this.setCSSVariable("--echoai-border","#e5e7eb");this.setCSSVariable("--echoai-border-light","#f3f4f6");this.setCSSVariable("--echoai-shadow","0 20px 60px rgba(0,0,0,0.15)");this.setCSSVariable("--echoai-radius","16px");this.setCSSVariable("--echoai-radius-small","8px");this.setCSSVariable("--echoai-spacing-xs","4px");this.setCSSVariable("--echoai-spacing-sm","8px");this.setCSSVariable("--echoai-spacing-md","12px");this.setCSSVariable("--echoai-spacing-lg","16px");this.setCSSVariable("--echoai-spacing-xl","20px");this.detectAndApplyColorScheme();}setCSSVariable(property,value){this.cssVariables.set(property,value);document.documentElement.style.setProperty(property,value);}getCSSVariable(property){return this.cssVariables.get(property);}updatePrimaryColor(color){this.setCSSVariable("--echoai-primary-color",color);this.setCSSVariable("--echoai-primary-hover",this.lightenColor(color,-10));this.setCSSVariable("--echoai-primary-light",this.lightenColor(color,90));}detectAndApplyColorScheme(){if(this.config.theme==="auto"){const prefersDark=window.matchMedia("(prefers-color-scheme: dark)").matches;if(prefersDark){this.applyDarkMode();}window .matchMedia("(prefers-color-scheme: dark)").addEventListener("change",(e)=>{if(e.matches){this.applyDarkMode();}else{this.applyLightMode();}});}else if(this.config.theme==="dark"){this.applyDarkMode();}}applyDarkMode(){this.setCSSVariable("--echoai-text-primary","#f9fafb");this.setCSSVariable("--echoai-text-secondary","#d1d5db");this.setCSSVariable("--echoai-text-muted","#9ca3af");this.setCSSVariable("--echoai-background","#1f2937");this.setCSSVariable("--echoai-background-secondary","#374151");this.setCSSVariable("--echoai-border","#4b5563");this.setCSSVariable("--echoai-border-light","#6b7280");}applyLightMode(){this.setCSSVariable("--echoai-text-primary","#374151");this.setCSSVariable("--echoai-text-secondary","#6b7280");this.setCSSVariable("--echoai-text-muted","#9ca3af");this.setCSSVariable("--echoai-background","#ffffff");this.setCSSVariable("--echoai-background-secondary","#f8fafc");this.setCSSVariable("--echoai-border","#e5e7eb");this.setCSSVariable("--echoai-border-light","#f3f4f6");}lightenColor(color,percent){const num=parseInt(color.replace("#",""),16);const amt=Math.round(2.55*percent);const R=(num>>16)+amt;const G=((num>>8)&0x00ff)+amt;const B=(num&0x0000ff)+amt;return("#"+(0x1000000+(R<255 ?(R<1 ? 0 : R): 255)*0x10000+(G<255 ?(G<1 ? 0 : G): 255)*0x100+(B<255 ?(B<1 ? 0 : B): 255)).toString(16).slice(1));}generateColorTheme(primaryColor){this.updatePrimaryColor(primaryColor);const contrast=this.calculateContrast(primaryColor,"#ffffff");if(contrast<4.5){const darkerColor=this.lightenColor(primaryColor,-20);this.updatePrimaryColor(darkerColor);}}calculateContrast(color1,color2){const getLuminance=(color)=>{const rgb=parseInt(color.slice(1),16);const r=(rgb>>16)&0xff;const g=(rgb>>8)&0xff;const b=(rgb>>0)&0xff;const [rs,gs,bs]=[r,g,b].map((c)=>{c=c/255;return c<=0.03928 ? c/12.92 : Math.pow((c+0.055)/1.055,2.4);});return 0.2126*rs+0.7152*gs+0.0722*bs;};const lum1=getLuminance(color1);const lum2=getLuminance(color2);const brightest=Math.max(lum1,lum2);const darkest=Math.min(lum1,lum2);return(brightest+0.05)/(darkest+0.05);}}class ResponsiveManager{constructor(){this.breakpoints={mobile: 480,tablet: 768,desktop: 1024,};this.currentBreakpoint=this.getCurrentBreakpoint();this.setupResizeListener();}getCurrentBreakpoint(){const width=window.innerWidth;if(width<=this.breakpoints.mobile)return "mobile";if(width<=this.breakpoints.tablet)return "tablet";return "desktop";}setupResizeListener(){let resizeTimeout;window.addEventListener("resize",()=>{clearTimeout(resizeTimeout);resizeTimeout=setTimeout(()=>{const newBreakpoint=this.getCurrentBreakpoint();if(newBreakpoint!==this.currentBreakpoint){this.currentBreakpoint=newBreakpoint;this.onBreakpointChange(newBreakpoint);}},100);});}onBreakpointChange(breakpoint){document.dispatchEvent(new CustomEvent("echoai:breakpoint-change",{detail:{breakpoint},}));}isMobile(){return this.currentBreakpoint==="mobile";}isTablet(){return this.currentBreakpoint==="tablet";}isDesktop(){return this.currentBreakpoint==="desktop";}getResponsiveConfig(config){const baseConfig={...config};if(this.isMobile()){return{...baseConfig,width: "calc(100vw-40px)",height: "calc(100vh-120px)",maxWidth: "380px",maxHeight: "600px",position: "fixed",bottom: "20px",left: "20px",right: "20px",top: "auto",};}return baseConfig;}}class UIManager{constructor(config,stateManager,eventManager){this.config=config;this.stateManager=stateManager;this.eventManager=eventManager;this.container=null;this.elements={};this.templates={};this.themeManager=new ThemeManager(config);this.responsiveManager=new ResponsiveManager();this.tabContentCache=new Map();this.tabLoadingStates=new Map();this.tabTransitionDuration=300;this.focusableElements='button,[href],input,select,textarea,[tabindex]:not([tabindex="-1"])';this.initializeVirtualScrolling();this.initializeTemplates();}initializeTemplates(){this.templates.message={user:(content,imageUrl,timestamp)=>`<div class="echoai-message echoai-message-user">${imageUrl ? `<div class="echoai-message-image"><img src="${imageUrl}" alt="Uploaded image"/></div>` : ""}<div class="echoai-message-content">${this.escapeHtml(content)}</div><div class="echoai-message-time">${timestamp}</div></div>`,assistant:(content,timestamp)=>`<div class="echoai-message echoai-message-assistant"><div class="echoai-message-content">${this.escapeHtml(content)}</div><div class="echoai-message-time">${timestamp}</div></div>`,streaming:(messageId,timestamp)=>`<div class="echoai-message echoai-message-assistant echoai-streaming" id="${messageId}"><div class="echoai-message-content"><span class="echoai-streaming-text"></span>${this.config.streamingConfig.showTypingIndicator ? '<span class="echoai-cursor">|</span>' : ""}</div><div class="echoai-message-time">${timestamp}</div></div>`,typing:()=>`<div class="echoai-message echoai-message-assistant echoai-typing"><div class="echoai-message-content"><div class="echoai-typing-indicator"><span></span><span></span><span></span></div></div></div>`,};this.templates.tab=(tabId,label,isActive=false)=>`<button class="echoai-tab ${isActive ? "echoai-tab-active" : ""}" data-tab="${tabId}" role="tab" aria-selected="${isActive}" aria-controls="${tabId}-panel" id="${tabId}-tab" tabindex="${isActive ? "0" : "-1"}">${label}</button>`;this.templates.intelligence={proactiveQuestions:(questions)=>`<div class="echoai-intelligence-section"><h4>Suggested Questions</h4><div class="echoai-question-buttons">${questions .map((q)=>`<button class="echoai-proactive-btn" data-question="${this.escapeHtml(q)}">${this.escapeHtml(q)}</button>`).join("")}</div></div>`,suggestedTopics:(topics)=>`<div class="echoai-intelligence-section"><h4>Related Topics</h4><div class="echoai-topic-buttons">${topics .map((topic)=>`<button class="echoai-topic-btn" data-topic="${this.escapeHtml(topic)}">${this.escapeHtml(topic)}</button>`).join("")}</div></div>`,conversationActions:(actions)=>`<div class="echoai-intelligence-section"><h4>Suggested Actions</h4><div class="echoai-action-buttons">${actions .filter((action)=>action.priority>0.5).map((action)=>`<button class="echoai-action-btn" data-action-type="${action.action_type}" data-content="${this.escapeHtml(action.content)}">${this.escapeHtml(action.content)}</button>`).join("")}</div></div>`,};this.templates.faq={item:(faq)=>`<div class="echoai-faq-item" data-faq-id="${faq.id||""}" data-question="${this.escapeHtml(faq.question)}" data-answer="${this.escapeHtml(faq.answer)}" data-category="${this.escapeHtml(faq.category||"General")}" tabindex="0" role="button" aria-label="FAQ: ${this.escapeHtml(faq.question)}"><div class="echoai-faq-question">${this.escapeHtml(faq.question)}${faq.popularity>0 ? `<span class="echoai-faq-popularity" title="Popular FAQ">🔥</span>` : ""}</div><div class="echoai-faq-answer">${this.escapeHtml(faq.answer)}</div><div class="echoai-faq-meta"><span class="echoai-faq-category">${this.escapeHtml(faq.category||"General")}</span>${faq.viewCount>0 ? `<span class="echoai-faq-views">${faq.viewCount}views</span>` : ""}${faq.helpfulCount>0 ? `<span class="echoai-faq-helpful">👍 ${faq.helpfulCount}</span>` : ""}</div></div>`,category:(categoryName,faqs)=>`<div class="echoai-faq-category-section" data-category="${this.escapeHtml(categoryName)}"><h3 class="echoai-faq-category-title">${this.escapeHtml(categoryName)}</h3><div class="echoai-faq-category-items">${faqs.map((faq)=>this.templates.faq.item(faq)).join("")}</div></div>`,empty:()=>`<div class="echoai-no-content"><div class="echoai-no-content-icon">❓</div><div class="echoai-no-content-title">No FAQs available</div><div class="echoai-no-content-message">Check back later for frequently asked questions.</div></div>`,loading:()=>`<div class="echoai-loading"><div class="echoai-loading-spinner"></div><div class="echoai-loading-text">Loading FAQs...</div></div>`,error:()=>`<div class="echoai-error"><div class="echoai-error-icon">⚠️</div><div class="echoai-error-title">Failed to load FAQs</div><div class="echoai-error-message">Please try again later or contact support.</div><button class="echoai-error-retry" onclick="window.EchoAI?.uiManager?.refreshTabContent('faq')">Retry</button></div>`,noResults:()=>`<div class="echoai-no-content"><div class="echoai-no-content-icon">🔍</div><div class="echoai-no-content-title">No matching FAQs found</div><div class="echoai-no-content-message">Try adjusting your search terms.</div></div>`,};this.templates.history={item:(conversation)=>`<div class="echoai-history-item" data-session-id="${conversation.sessionId}"><div class="echoai-history-preview">${this.escapeHtml(conversation.preview)}</div><div class="echoai-history-meta"><span>${conversation.messageCount}messages</span><span>${conversation.timestamp}</span></div></div>`,empty:()=>`<div class="echoai-no-content"><div class="echoai-no-content-icon">💬</div><div class="echoai-no-content-title">No conversation history</div><div class="echoai-no-content-message">Start a conversation to see your chat history here.</div></div>`,loading:()=>`<div class="echoai-loading"><div class="echoai-loading-spinner"></div><div class="echoai-loading-text">Loading conversation history...</div></div>`,error:()=>`<div class="echoai-error"><div class="echoai-error-icon">⚠️</div><div class="echoai-error-title">Failed to load history</div><div class="echoai-error-message">Unable to load your conversation history. Please try again.</div><button class="echoai-error-retry" type="button">Retry</button></div>`,};}escapeHtml(text){const div=document.createElement("div");div.textContent=text;return div.innerHTML;}validateImageFile(file){const errors=[];const allowedTypes=[ "image/jpeg","image/png","image/gif","image/webp",];if(!allowedTypes.includes(file.type)){errors.push("File type not supported. Please use JPG,PNG,GIF,or WebP.");}const maxSize=10*1024*1024;if(file.size>maxSize){errors.push("File size too large. Maximum size is 10MB.");}if(!file.type.startsWith("image/")){errors.push("Selected file is not an image.");}return{isValid: errors.length===0,errors: errors,};}formatFileSize(bytes){if(bytes===0)return "0 Bytes";const k=1024;const sizes=["Bytes","KB","MB","GB"];const i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(2))+" "+sizes[i];}showImagePreview(file){const reader=new FileReader();reader.onload=(e)=>{const imageHtml=`<div class="echoai-image-preview-container"><img src="${e.target.result}" alt="Upload preview" class="echoai-preview-image"/><div class="echoai-image-info"><span class="echoai-image-name">${this.escapeHtml(file.name)}</span><span class="echoai-image-size">${this.formatFileSize(file.size)}</span></div></div>`;this.elements.imagePreview.innerHTML=imageHtml;this.elements.imageUpload.style.display="block";this.hideDragDropArea();};reader.readAsDataURL(file);}showUploadProgress(show=true){if(this.elements.uploadProgress){this.elements.uploadProgress.style.display=show ? "block" : "none";}}updateUploadProgress(percentage){if(this.elements.progressFill&&this.elements.progressText){this.elements.progressFill.style.width=`${percentage}%`;this.elements.progressText.textContent=`Uploading... ${Math.round(percentage)}%`;}}showUploadError(message){this.showNotification(message,"error");this.showUploadProgress(false);}showDragDropArea(){if(this.elements.dragDropArea){this.elements.dragDropArea.style.display="block";}}hideDragDropArea(){if(this.elements.dragDropArea){this.elements.dragDropArea.style.display="none";}}showNotification(message,type="info"){let notification=this.container.querySelector(".echoai-notification");if(!notification){notification=document.createElement("div");notification.className="echoai-notification";this.container.appendChild(notification);}notification.className=`echoai-notification echoai-notification-${type}`;notification.textContent=message;notification.style.display="block";setTimeout(()=>{notification.style.display="none";},5000);}clearImageUpload(){if(this.elements.fileInput)this.elements.fileInput.value="";if(this.elements.imageUpload)this.elements.imageUpload.style.display="none";if(this.elements.imagePreview)this.elements.imagePreview.innerHTML="";this.showUploadProgress(false);this.hideDragDropArea();}renderTemplate(templatePath,...args){const pathParts=templatePath.split(".");let template=this.templates;for(const part of pathParts){template=template[part];if(!template){console.error(`Template not found: ${templatePath}`);return "";}}return typeof template==="function" ? template(...args): template;}createWidget(){this.container=document.createElement("div");this.container.id="echoai-enhanced-widget-container";this.container.className="echoai-enhanced-widget-container";this.applyResponsiveStyles();this.container.innerHTML=this.generateWidgetHTML();document.body.appendChild(this.container);this.cacheElements();this.setupResponsiveListeners();this.applyTheme();return this.container;}applyResponsiveStyles(){const responsiveConfig=this.responsiveManager.getResponsiveConfig({position: this.config.position,});const positions={"bottom-right":{bottom: "20px",right: "20px"},"bottom-left":{bottom: "20px",left: "20px"},"top-right":{top: "20px",right: "20px"},"top-left":{top: "20px",left: "20px"},};const baseStyles={position: "fixed",zIndex: "9999",...positions[this.config.position],};Object.assign(this.container.style,baseStyles,responsiveConfig);}setupResponsiveListeners(){document.addEventListener("echoai:breakpoint-change",(e)=>{this.handleBreakpointChange(e.detail.breakpoint);});}handleBreakpointChange(breakpoint){this.applyResponsiveStyles();if(breakpoint==="mobile"){this.container.classList.add("echoai-mobile");}else{this.container.classList.remove("echoai-mobile");}}applyTheme(){this.container.classList.add(`echoai-theme-${this.config.theme||"auto"}`);if(this.config.primaryColor){this.themeManager.generateColorTheme(this.config.primaryColor);}}cacheElements(){this.elements={widget: this.container.querySelector(".echoai-enhanced-widget"),toggleBtn: this.container.querySelector(".echoai-toggle-btn"),closeBtn: this.container.querySelector(".echoai-close-btn"),input: this.container.querySelector(".echoai-input"),sendBtn: this.container.querySelector(".echoai-send-btn"),messagesContainer: this.container.querySelector("#echoai-messages"),tabs: this.container.querySelectorAll(".echoai-tab"),tabPanels: this.container.querySelectorAll(".echoai-tab-panel"),intelligencePanel: this.container.querySelector("#echoai-intelligence-panel"),fileInput: this.container.querySelector("#echoai-file-input"),imageUpload: this.container.querySelector("#echoai-image-upload"),imagePreview: this.container.querySelector("#echoai-image-preview"),removeImageBtn: this.container.querySelector("#echoai-remove-image"),uploadBtn: this.container.querySelector("#echoai-upload-btn"),escalateBtn: this.container.querySelector("#echoai-escalate-btn"),dragDropArea: this.container.querySelector("#echoai-drag-drop-area"),browseBtn: this.container.querySelector("#echoai-browse-btn"),uploadProgress: this.container.querySelector("#echoai-upload-progress"),progressFill: this.container.querySelector("#echoai-progress-fill"),progressText: this.container.querySelector("#echoai-progress-text"),botStatus: this.container.querySelector("#echoai-bot-status"),connectionStatus: this.container.querySelector("#echoai-connection-status"),};}generateWidgetHTML(){return `<div class="echoai-enhanced-widget" style="display: none;"><div class="echoai-chat-container">${this.generateHeader()}${this.generateTabs()}${this.generateTabContent()}${this.generateBranding()}</div></div>${this.generateToggleButton()}${this.generateFileInput()}`;}generateHeader(){return `<div class="echoai-header"><div class="echoai-header-content"><div class="echoai-bot-avatar"><svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path></svg></div><div class="echoai-header-text"><div class="echoai-bot-name">${this.config.chatbotName||"AI Assistant"}</div><div class="echoai-bot-status" id="echoai-bot-status">Online</div></div><div class="echoai-connection-status" id="echoai-connection-status" style="display: none;"><div class="echoai-connection-indicator"></div></div></div><button class="echoai-close-btn" aria-label="Close chat"><svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg></button></div>`;}generateTabs(){const tabs=[];if(this.config.enableFAQ){tabs.push(this.renderTemplate("tab","faq","FAQ",false));}tabs.push(this.renderTemplate("tab","chat","Chat",true));if(this.config.enableHistory){tabs.push(this.renderTemplate("tab","history","History",false));}return tabs.length>1 ? `<div class="echoai-tabs" role="tablist" aria-label="Chat widget navigation">${tabs.join("")}</div>` : "";}generateTabContent(){return `<div class="echoai-tab-content">${this.config.enableFAQ ? this.generateFAQPanel(): ""}${this.generateChatPanel()}${this.config.enableHistory ? this.generateHistoryPanel(): ""}</div>`;}generateFAQPanel(){return `<div class="echoai-tab-panel echoai-tab-panel-transition" data-panel="faq" style="display: none;" role="tabpanel" aria-labelledby="faq-tab" id="faq-panel" tabindex="0"><div class="echoai-faq-container"><div class="echoai-faq-header"><h2 class="echoai-faq-title">Frequently Asked Questions</h2><p class="echoai-faq-subtitle">Find quick answers to common questions</p></div><div class="echoai-faq-search"><div class="echoai-search-input-container"><input type="text" placeholder="Search FAQs..." class="echoai-faq-search-input" aria-label="Search FAQs" autocomplete="off"/><div class="echoai-search-icon">🔍</div></div></div><div class="echoai-faq-content"><div class="echoai-faq-list" id="echoai-faq-list">${this.renderTemplate("faq.loading")}</div></div></div></div>`;}generateChatPanel(){return `<div class="echoai-tab-panel echoai-tab-panel-active echoai-tab-panel-transition" data-panel="chat" role="tabpanel" aria-labelledby="chat-tab" id="chat-panel" tabindex="0"><div class="echoai-messages" id="echoai-messages" role="log" aria-live="polite" aria-label="Chat messages"></div>${this.config.intelligenceConfig?.enabled ? this.generateIntelligencePanel(): ""}${this.generateInputContainer()}</div>`;}generateHistoryPanel(){return `<div class="echoai-tab-panel echoai-tab-panel-transition" data-panel="history" style="display: none;" role="tabpanel" aria-labelledby="history-tab" id="history-panel" tabindex="0"><div class="echoai-history-container"><div class="echoai-history-search"><input type="text" placeholder="Search conversations..." class="echoai-history-search-input" aria-label="Search conversations"/></div><div class="echoai-history-list" id="echoai-history-list">${this.renderTemplate("history.loading")}</div><div class="echoai-history-pagination" id="echoai-history-pagination" style="display: none;"><button class="echoai-load-more-btn" type="button" aria-label="Load more conversations">Load More Conversations</button><div class="echoai-pagination-info"><span class="echoai-pagination-text"></span></div></div></div></div>`;}generateIntelligencePanel(){return `<div class="echoai-intelligence-panel" id="echoai-intelligence-panel" style="display: none;" aria-label="AI suggestions"><div class="echoai-proactive-questions" id="echoai-proactive-questions"></div><div class="echoai-suggested-topics" id="echoai-suggested-topics"></div><div class="echoai-conversation-actions" id="echoai-conversation-actions"></div></div>`;}generateInputContainer(){return `<div class="echoai-input-container">${this.config.enableImageUpload ? this.generateImageUpload(): ""}<div class="echoai-input-row">${this.config.enableImageUpload ? this.generateUploadButton(): ""}<input type="text" class="echoai-input" placeholder="Type your message..." aria-label="Type your message"/>${this.config.escalationConfig?.enabled&&this.config.escalationConfig?.showEscalationButton ? this.generateEscalationButton(): ""}${this.generateSendButton()}</div></div>`;}generateImageUpload(){return `<div class="echoai-image-upload" id="echoai-image-upload" style="display: none;"><div class="echoai-image-preview" id="echoai-image-preview"></div><div class="echoai-upload-progress" id="echoai-upload-progress" style="display: none;"><div class="echoai-progress-bar"><div class="echoai-progress-fill" id="echoai-progress-fill"></div></div><span class="echoai-progress-text" id="echoai-progress-text">Uploading...</span></div><button class="echoai-remove-image" id="echoai-remove-image" aria-label="Remove image"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg></button></div><div class="echoai-drag-drop-area" id="echoai-drag-drop-area" style="display: none;"><div class="echoai-drag-drop-content"><svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle cx="8.5" cy="8.5" r="1.5"></circle><polyline points="21,15 16,10 5,21"></polyline></svg><p>Drop your image here or<button class="echoai-browse-btn" id="echoai-browse-btn">browse</button></p><small>Supports: JPG,PNG,GIF,WebP(max 10MB)</small></div></div>`;}generateUploadButton(){return `<button class="echoai-upload-btn" id="echoai-upload-btn" title="Upload image" aria-label="Upload image"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle cx="8.5" cy="8.5" r="1.5"></circle><polyline points="21,15 16,10 5,21"></polyline></svg></button>`;}generateEscalationButton(){return `<button class="echoai-escalate-btn" id="echoai-escalate-btn" title="Talk to human" aria-label="Talk to human"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg></button>`;}generateSendButton(){return `<button class="echoai-send-btn" aria-label="Send message"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22,2 15,22 11,13 2,9"></polygon></svg></button>`;}generateToggleButton(){return `<button class="echoai-toggle-btn" aria-label="Toggle chat"><svg class="echoai-chat-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path></svg><svg class="echoai-close-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="display: none;"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg></button>`;}generateFileInput(){return this.config.enableImageUpload ? '<input type="file" id="echoai-file-input" accept="image/jpeg,image/png,image/gif,image/webp" multiple="false" style="display: none;" aria-label="Select image file"/>' : "";}generateBranding(){return this.config.showBranding ? '<div class="echoai-branding">Powered by EchoAI</div>' : "";}updateWidgetVisibility(isOpen){if(this.elements.widget){this.elements.widget.style.display=isOpen ? "block" : "none";const chatIcon=this.elements.toggleBtn.querySelector(".echoai-chat-icon");const closeIcon=this.elements.toggleBtn.querySelector(".echoai-close-icon");if(isOpen){chatIcon.style.display="none";closeIcon.style.display="block";if(this.elements.input)this.elements.input.focus();}else{chatIcon.style.display="block";closeIcon.style.display="none";}}}async switchTab(targetTab,focusTarget=null){const currentState=this.stateManager.getState();const currentTab=currentState.activeTab;if(currentTab===targetTab)return;if(this.tabLoadingStates.get(targetTab)){return;}this.stateManager.setState({activeTab: targetTab});const currentPanel=this.container.querySelector(`[data-panel="${currentTab}"]`);const targetPanel=this.container.querySelector(`[data-panel="${targetTab}"]`);if(!targetPanel)return;await this.loadTabContent(targetTab);await this.performTabTransition(currentPanel,targetPanel,targetTab);this.updateTabAccessibility(targetTab);this.manageFocusOnTabSwitch(targetTab,focusTarget);this.eventManager.emit("tab-changed",{previousTab: currentTab,currentTab: targetTab,});}async loadTabContent(tabId){if(this.tabContentCache.has(tabId)){return this.tabContentCache.get(tabId);}this.tabLoadingStates.set(tabId,true);try{let content=null;switch(tabId){case "faq": content=await this.loadFAQContent();break;case "history": content=await this.loadHistoryContent();break;case "chat": content={type: "live"};break;default: content={type: "empty"};}this.tabContentCache.set(tabId,content);this.updateTabContentUI(tabId,content);return content;}catch(error){console.error(`Error loading content for tab ${tabId}:`,error);this.updateTabContentUI(tabId,{type: "error",error});return{type: "error",error};}finally{this.tabLoadingStates.set(tabId,false);}}async loadFAQContent(){try{this.stateManager.setState({isLoading: true});const faqData=await this.apiClient.loadFAQs();const processedFAQs=this.processFAQData(faqData);this.stateManager.setState({faqs: processedFAQs,isLoading: false,});return{type: "faq",data: processedFAQs,timestamp: Date.now(),};}catch(error){console.error("EchoAI: Error loading FAQ content:",error);this.stateManager.setState({isLoading: false});return{type: "error",error: error.message,timestamp: Date.now(),};}}processFAQData(faqData){if(!faqData||!Array.isArray(faqData)){return [];}return faqData.map((faq,index)=>({id: faq.id||`faq-${index}`,question: faq.question||"",answer: faq.answer||"",category: faq.category||"General",tags: faq.tags||[],popularity: faq.popularity||0,viewCount: faq.viewCount||0,helpfulCount: faq.helpfulCount||0,createdAt: faq.createdAt||new Date().toISOString(),updatedAt: faq.updatedAt||new Date().toISOString(),}));}categorizeFAQs(faqs){const categories={};faqs.forEach((faq)=>{const category=faq.category||"General";if(!categories[category]){categories[category]=[];}categories[category].push(faq);});Object.keys(categories).forEach((category)=>{categories[category].sort((a,b)=>{if(b.popularity!==a.popularity){return b.popularity-a.popularity;}return b.helpfulCount-a.helpfulCount;});});return categories;}async loadHistoryContent(page=1,search=''){try{const historyResponse=await this.apiClient.loadConversationHistory(page,20,search);const historyData=Array.isArray(historyResponse)? historyResponse : historyResponse.conversations||historyResponse.data||[];const pagination=historyResponse.pagination||{currentPage: page,totalPages: 1,totalCount: historyData.length,hasMore: false};const processedHistory=historyData.map(item=>({sessionId: item.sessionId||item.id,preview: this.truncateText(item.lastMessage||item.preview||'No messages',60),messageCount: item.messageCount||item.messages?.length||0,timestamp: this.formatTimestamp(item.updatedAt||item.createdAt||item.timestamp),createdAt: item.createdAt,status: item.status||'completed'}));if(!historyResponse.pagination){processedHistory.sort((a,b)=>new Date(b.createdAt)-new Date(a.createdAt));}const currentHistory=this.stateManager.getState().conversationHistory||[];const updatedHistory=page===1 ? processedHistory : [...currentHistory,...processedHistory];this.stateManager.setState({conversationHistory: updatedHistory,historyPagination: pagination});return{type: "history",data: processedHistory,pagination: pagination,isLoadMore: page>1,timestamp: Date.now(),};}catch(error){console.error("EchoAI: Failed to load conversation history:",error);return{type: "error",error: error.message,timestamp: Date.now(),};}}updateTabContentUI(tabId,content){const panel=this.container.querySelector(`[data-panel="${tabId}"]`);if(!panel)return;switch(tabId){case "faq": this.updateFAQPanelContent(panel,content);break;case "history": this.updateHistoryPanelContent(panel,content);break;}}updateFAQPanelContent(panel,content){const faqList=panel.querySelector("#echoai-faq-list");if(!faqList)return;if(content.type==="error"){faqList.innerHTML=this.renderTemplate("faq.error");}else if(content.data&&content.data.length>0){const categorizedFAQs=this.categorizeFAQs(content.data);const categoriesHTML=Object.keys(categorizedFAQs).sort().map((categoryName)=>this.renderTemplate("faq.category",categoryName,categorizedFAQs[categoryName])).join("");faqList.innerHTML=categoriesHTML;this.setupFAQEventListeners(panel);faqList.setAttribute("data-original-content",JSON.stringify(content.data));}else{faqList.innerHTML=this.renderTemplate("faq.empty");}}updateHistoryPanelContent(panel,content){const historyList=panel.querySelector("#echoai-history-list");const paginationContainer=panel.querySelector("#echoai-history-pagination");if(!historyList)return;if(content.type==="error"){historyList.innerHTML=this.renderTemplate("history.error");if(paginationContainer){paginationContainer.style.display="none";}}else if(content.data&&content.data.length>0){if(content.isLoadMore){const newItems=content.data .map((conversation)=>this.renderTemplate("history.item",conversation)).join("");historyList.insertAdjacentHTML('beforeend',newItems);}else{historyList.innerHTML=content.data .map((conversation)=>this.renderTemplate("history.item",conversation)).join("");}this.setupHistoryEventListeners(panel);this.updateHistoryPagination(panel,content.pagination);}else{historyList.innerHTML=this.renderTemplate("history.empty");if(paginationContainer){paginationContainer.style.display="none";}}}updateHistoryPagination(panel,pagination){const paginationContainer=panel.querySelector("#echoai-history-pagination");if(!paginationContainer||!pagination)return;const loadMoreBtn=paginationContainer.querySelector(".echoai-load-more-btn");const paginationText=paginationContainer.querySelector(".echoai-pagination-text");if(pagination.hasMore||pagination.currentPage<pagination.totalPages){paginationContainer.style.display="block";if(loadMoreBtn){loadMoreBtn.style.display="block";loadMoreBtn.disabled=false;const newBtn=loadMoreBtn.cloneNode(true);loadMoreBtn.parentNode.replaceChild(newBtn,loadMoreBtn);this.eventManager.addEventListener(newBtn,"click",async()=>{newBtn.disabled=true;newBtn.textContent="Loading...";try{const nextPage=pagination.currentPage+1;const searchInput=panel.querySelector(".echoai-history-search-input");const searchTerm=searchInput ? searchInput.value : '';const content=await this.loadHistoryContent(nextPage,searchTerm);this.updateHistoryPanelContent(panel,content);}catch(error){console.error("EchoAI: Failed to load more history:",error);newBtn.disabled=false;newBtn.textContent="Load More Conversations";this.showNotification("Failed to load more conversations","error");}});}}else{if(loadMoreBtn){loadMoreBtn.style.display="none";}}if(paginationText){const totalCount=pagination.totalCount||0;const currentCount=this.stateManager.getState().conversationHistory?.length||0;paginationText.textContent=`Showing ${currentCount}of ${totalCount}conversations`;}}async performTabTransition(currentPanel,targetPanel,targetTab){return new Promise((resolve)=>{if(currentPanel){currentPanel.classList.add("echoai-tab-panel-exit");}targetPanel.classList.add("echoai-tab-panel-enter");targetPanel.style.display="block";targetPanel.classList.add("echoai-tab-panel-active");requestAnimationFrame(()=>{if(currentPanel){currentPanel.classList.add("echoai-tab-panel-exit-active");}targetPanel.classList.add("echoai-tab-panel-enter-active");setTimeout(()=>{if(currentPanel){currentPanel.style.display="none";currentPanel.classList.remove("echoai-tab-panel-active","echoai-tab-panel-exit","echoai-tab-panel-exit-active");}targetPanel.classList.remove("echoai-tab-panel-enter","echoai-tab-panel-enter-active");resolve();},this.tabTransitionDuration);});});}updateTabAccessibility(activeTab){this.elements.tabs.forEach((tab)=>{const isActive=tab.dataset.tab===activeTab;tab.classList.toggle("echoai-tab-active",isActive);tab.setAttribute("aria-selected",isActive.toString());tab.setAttribute("tabindex",isActive ? "0" : "-1");});this.elements.tabPanels.forEach((panel)=>{const isActive=panel.dataset.panel===activeTab;panel.setAttribute("aria-hidden",(!isActive).toString());});}manageFocusOnTabSwitch(targetTab,focusTarget=null){const targetPanel=this.container.querySelector(`[data-panel="${targetTab}"]`);if(!targetPanel)return;if(focusTarget){const element=targetPanel.querySelector(focusTarget);if(element){element.focus();return;}}switch(targetTab){case "faq": const faqSearch=targetPanel.querySelector(".echoai-faq-search-input");if(faqSearch){faqSearch.focus();}break;case "history": const historySearch=targetPanel.querySelector(".echoai-history-search-input");if(historySearch){historySearch.focus();}break;case "chat": const chatInput=targetPanel.querySelector(".echoai-input");if(chatInput){chatInput.focus();}break;default: targetPanel.focus();}}setupFAQEventListeners(panel){const searchInput=panel.querySelector(".echoai-faq-search-input");if(searchInput){let searchTimeout;this.eventManager.addEventListener(searchInput,"input",(e)=>{clearTimeout(searchTimeout);searchTimeout=setTimeout(()=>{this.filterFAQs(e.target.value,panel);},300);});this.eventManager.addEventListener(searchInput,"keydown",(e)=>{if(e.key==="Escape"){e.target.value="";this.filterFAQs("",panel);e.target.blur();}});}const faqItems=panel.querySelectorAll(".echoai-faq-item");faqItems.forEach((item)=>{this.eventManager.addEventListener(item,"click",()=>{const faqId=item.getAttribute("data-faq-id");const question=item.getAttribute("data-question");const answer=item.getAttribute("data-answer");if(faqId){this.trackFAQUsage(faqId);}if(question&&answer&&window.EchoAI){window.EchoAI.addFAQToChat(question,answer);this.switchTab("chat");}});this.eventManager.addEventListener(item,"keydown",(e)=>{if(e.key==="Enter"||e.key===" "){e.preventDefault();item.click();}});this.eventManager.addEventListener(item,"mouseenter",()=>{item.classList.add("echoai-faq-item-hover");});this.eventManager.addEventListener(item,"mouseleave",()=>{item.classList.remove("echoai-faq-item-hover");});});const retryButton=panel.querySelector(".echoai-error-retry");if(retryButton){this.eventManager.addEventListener(retryButton,"click",()=>{this.refreshTabContent("faq");});}}setupHistoryEventListeners(panel){const searchInput=panel.querySelector(".echoai-history-search-input");if(searchInput){let searchTimeout;this.eventManager.addEventListener(searchInput,"input",(e)=>{const searchTerm=e.target.value;clearTimeout(searchTimeout);searchTimeout=setTimeout(async()=>{try{if(searchTerm.trim()){const content=await this.loadHistoryContent(1,searchTerm);this.updateHistoryPanelContent(panel,content);}else{const content=await this.loadHistoryContent(1,'');this.updateHistoryPanelContent(panel,content);}}catch(error){console.error("EchoAI: Search failed:",error);this.filterHistory(searchTerm);}},300);});this.eventManager.addEventListener(searchInput,"keydown",(e)=>{if(e.key==="Escape"){e.target.value="";clearTimeout(searchTimeout);this.loadHistoryContent(1,'').then(content=>{this.updateHistoryPanelContent(panel,content);});e.target.blur();}});}const historyItems=panel.querySelectorAll(".echoai-history-item");historyItems.forEach((item)=>{const newItem=item.cloneNode(true);item.parentNode.replaceChild(newItem,item);this.eventManager.addEventListener(newItem,"click",async()=>{const sessionId=newItem.getAttribute("data-session-id");if(sessionId&&window.EchoAI){newItem.classList.add("echoai-history-item-loading");try{await window.EchoAI.loadConversation(sessionId);this.switchTab("chat");}catch(error){console.error("EchoAI: Failed to load conversation:",error);}finally{newItem.classList.remove("echoai-history-item-loading");}}});this.eventManager.addEventListener(newItem,"keydown",(e)=>{if(e.key==="Enter"||e.key===" "){e.preventDefault();newItem.click();}});this.eventManager.addEventListener(newItem,"mouseenter",()=>{newItem.classList.add("echoai-history-item-hover");});this.eventManager.addEventListener(newItem,"mouseleave",()=>{newItem.classList.remove("echoai-history-item-hover");});});const retryButton=panel.querySelector(".echoai-error-retry");if(retryButton){this.eventManager.addEventListener(retryButton,"click",()=>{this.refreshTabContent("history");});}}filterFAQs(searchTerm,panel){const faqList=panel.querySelector("#echoai-faq-list");if(!faqList)return;const term=searchTerm.toLowerCase().trim();if(!term){this.showAllFAQs(panel);return;}const originalData=faqList.getAttribute("data-original-content");if(!originalData)return;try{const faqs=JSON.parse(originalData);const filteredFAQs=faqs.filter((faq)=>{const question=(faq.question||"").toLowerCase();const answer=(faq.answer||"").toLowerCase();const category=(faq.category||"").toLowerCase();const tags=(faq.tags||[]).join(" ").toLowerCase();return(question.includes(term)||answer.includes(term)||category.includes(term)||tags.includes(term));});if(filteredFAQs.length>0){filteredFAQs.sort((a,b)=>{const aQuestionMatch=(a.question||"").toLowerCase().includes(term);const bQuestionMatch=(b.question||"").toLowerCase().includes(term);if(aQuestionMatch&&!bQuestionMatch)return-1;if(!aQuestionMatch&&bQuestionMatch)return 1;return(b.popularity||0)-(a.popularity||0);});const filteredHTML=filteredFAQs .map((faq)=>this.renderTemplate("faq.item",faq)).join("");faqList.innerHTML=`<div class="echoai-faq-search-results"><div class="echoai-faq-search-header">Found ${filteredFAQs.length}result${filteredFAQs.length!==1 ? "s" : ""}for "${this.escapeHtml(searchTerm)}"</div>${filteredHTML}</div>`;}else{faqList.innerHTML=this.renderTemplate("faq.noResults");}this.setupFAQEventListeners(panel);}catch(error){console.error("EchoAI: Error filtering FAQs:",error);}}showAllFAQs(panel){const faqList=panel.querySelector("#echoai-faq-list");if(!faqList)return;const originalData=faqList.getAttribute("data-original-content");if(!originalData)return;try{const faqs=JSON.parse(originalData);const categorizedFAQs=this.categorizeFAQs(faqs);const categoriesHTML=Object.keys(categorizedFAQs).sort().map((categoryName)=>this.renderTemplate("faq.category",categoryName,categorizedFAQs[categoryName])).join("");faqList.innerHTML=categoriesHTML;this.setupFAQEventListeners(panel);}catch(error){console.error("EchoAI: Error showing all FAQs:",error);}}filterHistory(searchTerm){const historyPanel=this.container.querySelector('[data-panel="history"]');if(!historyPanel)return;const historyItems=historyPanel.querySelectorAll(".echoai-history-item");const term=searchTerm.toLowerCase().trim();let visibleCount=0;historyItems.forEach((item)=>{const preview=item.querySelector(".echoai-history-preview")?.textContent?.toLowerCase()||'';const timestamp=item.querySelector(".echoai-history-meta")?.textContent?.toLowerCase()||'';const matches=!term||preview.includes(term)||timestamp.includes(term);if(matches){item.style.display="block";visibleCount++;if(term){this.highlightSearchTerm(item,term);}else{this.removeHighlights(item);}}else{item.style.display="none";}});this.updateHistoryEmptyState(historyPanel,visibleCount,term);}highlightSearchTerm(item,term){const previewElement=item.querySelector(".echoai-history-preview");if(!previewElement)return;const originalText=previewElement.textContent;const regex=new RegExp(`(${this.escapeRegex(term)})`,'gi');const highlightedText=originalText.replace(regex,'<mark class="echoai-search-highlight">$1</mark>');previewElement.innerHTML=highlightedText;}removeHighlights(item){const previewElement=item.querySelector(".echoai-history-preview");if(!previewElement)return;const marks=previewElement.querySelectorAll('.echoai-search-highlight');marks.forEach(mark=>{mark.outerHTML=mark.textContent;});}escapeRegex(string){return string.replace(/[.*+?^${}()|[\]\\]/g,'\\$&');}updateHistoryEmptyState(panel,visibleCount,searchTerm){const historyList=panel.querySelector("#echoai-history-list");if(!historyList)return;const existingEmptyState=panel.querySelector(".echoai-search-no-results");if(existingEmptyState){existingEmptyState.remove();}if(visibleCount===0&&searchTerm){const emptyState=document.createElement("div");emptyState.className="echoai-search-no-results";emptyState.innerHTML=`<div class="echoai-no-content"><p>No conversations found for "${this.escapeHtml(searchTerm)}"</p><button class="echoai-clear-search" type="button">Clear search</button></div>`;historyList.appendChild(emptyState);const clearButton=emptyState.querySelector(".echoai-clear-search");if(clearButton){this.eventManager.addEventListener(clearButton,"click",()=>{const searchInput=panel.querySelector(".echoai-history-search-input");if(searchInput){searchInput.value="";this.filterHistory("");searchInput.focus();}});}}}trackFAQUsage(faqId){try{const faqUsage=JSON.parse(localStorage.getItem("echoai-faq-usage")||"{}");faqUsage[faqId]=(faqUsage[faqId]||0)+1;localStorage.setItem("echoai-faq-usage",JSON.stringify(faqUsage));if(window.EchoAI&&window.EchoAI.apiClient){window.EchoAI.apiClient.trackFAQUsage(faqId);}}catch(error){console.debug("EchoAI: Error tracking FAQ usage:",error);}}async refreshTabContent(tabId){try{this.clearTabCache(tabId);const content=await this.loadTabContent(tabId);const panel=this.container.querySelector(`[data-panel="${tabId}"]`);if(panel){this.updateTabContentUI(tabId,content);}return content;}catch(error){console.error(`EchoAI: Error refreshing ${tabId}content:`,error);throw error;}}clearTabCache(tabId=null){if(tabId){this.tabContentCache.delete(tabId);}else{this.tabContentCache.clear();}}async refreshTabContent(tabId){this.clearTabCache(tabId);await this.loadTabContent(tabId);}initializeVirtualScrolling(){this.virtualScrolling={itemHeight: 80,containerHeight: 0,scrollTop: 0,visibleStart: 0,visibleEnd: 0,buffer: 5,isEnabled: false,};this.virtualScrollingThreshold=50;}addMessage(content,role="user",imageUrl=null,options={}){if(!this.elements.messagesContainer)return;const messageId=options.id||`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;const timestamp=options.timestamp||new Date();const status=options.status||"delivered";const message={id: messageId,content,role,imageUrl,timestamp,status,isStreaming: false,...options,};const currentState=this.stateManager.getState();const updatedMessages=[...currentState.messages,message];this.stateManager.setState({messages: updatedMessages});this.renderMessage(message);this.scrollToBottom();this.checkVirtualScrolling();this.announceMessage(content,role);return messageId;}renderMessage(message){if(!this.elements.messagesContainer)return;const messageElement=this.createMessageElement(message);messageElement.style.opacity="0";messageElement.style.transform="translateY(10px)";this.elements.messagesContainer.appendChild(messageElement);requestAnimationFrame(()=>{messageElement.style.transition="all 0.3s ease";messageElement.style.opacity="1";messageElement.style.transform="translateY(0)";});if(this.virtualScrolling&&this.virtualScrolling.isEnabled){this.updateVirtualScrolling();}}createMessageElement(message){const messageDiv=document.createElement("div");messageDiv.className=`echoai-message echoai-message-${message.role}`;messageDiv.setAttribute("data-message-id",message.id);messageDiv.setAttribute("role","article");messageDiv.setAttribute("aria-label",`${message.role}message`);if(message.status){messageDiv.classList.add(`echoai-message-${message.status}`);}const contentDiv=document.createElement("div");contentDiv.className="echoai-message-content";if(message.imageUrl){const imageDiv=document.createElement("div");imageDiv.className="echoai-message-image";const img=document.createElement("img");img.src=message.imageUrl;img.alt="Uploaded image";img.loading="lazy";imageDiv.appendChild(img);contentDiv.appendChild(imageDiv);}const textDiv=document.createElement("div");textDiv.className="echoai-message-text";textDiv.innerHTML=this.formatMessageContent(message.content);contentDiv.appendChild(textDiv);messageDiv.appendChild(contentDiv);const timeDiv=document.createElement("div");timeDiv.className="echoai-message-time";timeDiv.textContent=this.formatTimestamp(message.timestamp);messageDiv.appendChild(timeDiv);const statusDiv=document.createElement("div");statusDiv.className="echoai-message-status";statusDiv.innerHTML=this.getStatusIcon(message.status);statusDiv.setAttribute("aria-label",`Message ${message.status}`);messageDiv.appendChild(statusDiv);const actionsDiv=this.createMessageActions(message);messageDiv.appendChild(actionsDiv);return messageDiv;}formatMessageContent(content){const escaped=this.escapeHtml(content);const withBreaks=escaped.replace(/\n/g,"<br>");const withLinks=withBreaks.replace(/(https?:\/\/[^\s]+)/g,'<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>');return withLinks;}formatTimestamp(timestamp){const date=new Date(timestamp);const now=new Date();const diffMs=now-date;const diffMins=Math.floor(diffMs/60000);const diffHours=Math.floor(diffMs/3600000);const diffDays=Math.floor(diffMs/86400000);if(diffMins<1){return "Just now";}else if(diffMins<60){return `${diffMins}m ago`;}else if(diffHours<24){return `${diffHours}h ago`;}else if(diffDays<7){return `${diffDays}d ago`;}else{return date.toLocaleDateString();}}truncateText(text,maxLength){if(!text||text.length<=maxLength){return text||'';}return text.substring(0,maxLength).trim()+'...';}getStatusIcon(status){switch(status){case "pending": return `<svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"></circle><polyline points="12,6 12,12 16,14"></polyline></svg>`;case "delivered": return `<svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="20,6 9,17 4,12"></polyline></svg>`;case "failed": return `<svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line></svg>`;default: return "";}}createMessageActions(message){const actionsDiv=document.createElement("div");actionsDiv.className="echoai-message-actions";const copyBtn=document.createElement("button");copyBtn.className="echoai-message-action echoai-copy-btn";copyBtn.setAttribute("aria-label","Copy message");copyBtn.innerHTML=`<svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>`;this.eventManager.addEventListener(copyBtn,"click",()=>{this.copyMessageToClipboard(message.content);});actionsDiv.appendChild(copyBtn);if(message.role==="assistant"||message.role==="agent"){const feedbackDiv=document.createElement("div");feedbackDiv.className="echoai-message-feedback";const thumbsUpBtn=document.createElement("button");thumbsUpBtn.className="echoai-message-action echoai-thumbs-up";thumbsUpBtn.setAttribute("aria-label","Helpful");thumbsUpBtn.innerHTML=`<svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M7 10v12l4-4 5 4V10l-4.5-4.5L7 10z"></path><path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path></svg>`;const thumbsDownBtn=document.createElement("button");thumbsDownBtn.className="echoai-message-action echoai-thumbs-down";thumbsDownBtn.setAttribute("aria-label","Not helpful");thumbsDownBtn.innerHTML=`<svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M17 14V2l-4 4-5-4v12l4.5 4.5L17 14z"></path><path d="M3.16 19.39a5.5 5.5 0 0 0 7.78 0L12 18.33l1.06 1.06a5.5 5.5 0 0 0 7.78-7.78l-1.06-1.06L12 2.77 4.22 10.55l-1.06 1.06a5.5 5.5 0 0 0 0 7.78z"></path></svg>`;this.eventManager.addEventListener(thumbsUpBtn,"click",()=>{this.submitMessageFeedback(message.id,"positive");});this.eventManager.addEventListener(thumbsDownBtn,"click",()=>{this.submitMessageFeedback(message.id,"negative");});feedbackDiv.appendChild(thumbsUpBtn);feedbackDiv.appendChild(thumbsDownBtn);actionsDiv.appendChild(feedbackDiv);}return actionsDiv;}async copyMessageToClipboard(content){try{await navigator.clipboard.writeText(content);this.showNotification("Message copied to clipboard","success");}catch(error){const textArea=document.createElement("textarea");textArea.value=content;document.body.appendChild(textArea);textArea.select();document.execCommand("copy");document.body.removeChild(textArea);this.showNotification("Message copied to clipboard","success");}}submitMessageFeedback(messageId,feedback){console.log(`EchoAI: Feedback submitted for message ${messageId}: ${feedback}`);this.showNotification(`Thank you for your feedback!`,"success");this.eventManager.emit("message-feedback",{messageId,feedback});}announceMessage(content,role){const announcement=document.createElement("div");announcement.className="echoai-sr-only";announcement.setAttribute("aria-live","polite");announcement.textContent=`${role==="user" ? "You" : "Assistant"}: ${content}`;document.body.appendChild(announcement);setTimeout(()=>{document.body.removeChild(announcement);},1000);}checkVirtualScrolling(){const currentState=this.stateManager.getState();const messageCount=currentState.messages.length;if(messageCount>this.virtualScrollingThreshold&&!this.virtualScrolling.isEnabled){this.enableVirtualScrolling();}}enableVirtualScrolling(){this.virtualScrolling.isEnabled=true;if(this.elements.messagesContainer){this.elements.messagesContainer.classList.add("echoai-virtual-scrolling");this.eventManager.addEventListener(this.elements.messagesContainer,"scroll",()=>{this.updateVirtualScrolling();});}}updateVirtualScrolling(){if(!this.virtualScrolling.isEnabled||!this.elements.messagesContainer)return;const container=this.elements.messagesContainer;const scrollTop=container.scrollTop;const containerHeight=container.clientHeight;this.virtualScrolling.scrollTop=scrollTop;this.virtualScrolling.containerHeight=containerHeight;const startIndex=Math.floor(scrollTop/this.virtualScrolling.itemHeight);const endIndex=Math.min(startIndex+Math.ceil(containerHeight/this.virtualScrolling.itemHeight)+this.virtualScrolling.buffer,this.stateManager.getState().messages.length);this.virtualScrolling.visibleStart=Math.max(0,startIndex-this.virtualScrolling.buffer);this.virtualScrolling.visibleEnd=endIndex;this.renderVirtualMessages();}renderVirtualMessages(){if(!this.virtualScrolling.isEnabled)return;const messages=this.stateManager.getState().messages;const container=this.elements.messagesContainer;container.innerHTML="";if(this.virtualScrolling.visibleStart>0){const topSpacer=document.createElement("div");topSpacer.style.height=`${this.virtualScrolling.visibleStart*this.virtualScrolling.itemHeight}px`;container.appendChild(topSpacer);}for(let i=this.virtualScrolling.visibleStart;i<this.virtualScrolling.visibleEnd;i++){if(messages[i]){const messageElement=this.createMessageElement(messages[i]);container.appendChild(messageElement);}}if(this.virtualScrolling.visibleEnd<messages.length){const bottomSpacer=document.createElement("div");const remainingMessages=messages.length-this.virtualScrolling.visibleEnd;bottomSpacer.style.height=`${remainingMessages*this.virtualScrolling.itemHeight}px`;container.appendChild(bottomSpacer);}}scrollToBottom(smooth=true){if(this.elements.messagesContainer){const scrollOptions={top: this.elements.messagesContainer.scrollHeight,behavior: smooth ? "smooth" : "auto",};this.elements.messagesContainer.scrollTo(scrollOptions);}}clearMessages(){if(this.elements.messagesContainer){this.elements.messagesContainer.innerHTML='';}this.stateManager.setState({messages: []});this.stateManager.setState({isStreaming: false,proactiveQuestions: [],suggestedTopics: [],conversationActions: [],intelligenceMetadata: null});}updateConversationStatus(status,statusData={}){const statusElement=this.container.querySelector("#echoai-bot-status");const inputElement=this.elements.input;const sendButton=this.elements.sendBtn;if(!statusElement)return;switch(status){case "AI_HANDLING": statusElement.textContent="AI Assistant";statusElement.className="echoai-bot-status echoai-status-ai";if(inputElement){inputElement.disabled=false;inputElement.placeholder="Type your message...";}if(sendButton){sendButton.disabled=false;}this.hideHumanAgentIndicator();break;case "AWAITING_HUMAN_RESPONSE": statusElement.textContent=statusData.agentName||"Human Agent";statusElement.className="echoai-bot-status echoai-status-human";if(inputElement){inputElement.disabled=true;inputElement.placeholder="Human agent is responding...";}if(sendButton){sendButton.disabled=true;}this.showHumanAgentIndicator(statusData);break;case "RESOLVED": statusElement.textContent="Conversation Resolved";statusElement.className="echoai-bot-status echoai-status-resolved";if(inputElement){inputElement.disabled=false;inputElement.placeholder="Start a new conversation...";}if(sendButton){sendButton.disabled=false;}this.hideHumanAgentIndicator();break;default: statusElement.textContent="Online";statusElement.className="echoai-bot-status";}this.announceStatusChange(status,statusData);}showHumanAgentIndicator(statusData={}){this.hideHumanAgentIndicator();const indicator=document.createElement("div");indicator.className="echoai-human-agent-indicator";indicator.id="echoai-human-agent-indicator";indicator.innerHTML=`<div class="echoai-agent-avatar"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg></div><div class="echoai-agent-info"><div class="echoai-agent-name">${statusData.agentName||"Human Agent"}</div><div class="echoai-agent-status"><span class="echoai-status-dot"></span>${statusData.agentStatus||"Online"}</div></div>`;const header=this.container.querySelector(".echoai-header");if(header){header.insertAdjacentElement("afterend",indicator);}requestAnimationFrame(()=>{indicator.classList.add("echoai-agent-indicator-visible");});}hideHumanAgentIndicator(){const indicator=this.container.querySelector("#echoai-human-agent-indicator");if(indicator){indicator.classList.add("echoai-agent-indicator-hiding");setTimeout(()=>{if(indicator.parentNode){indicator.parentNode.removeChild(indicator);}},300);}}updateConnectionStatus(isConnected,connectionType=null,error=null){const statusElement=this.container.querySelector("#echoai-connection-status");if(!statusElement)return;if(isConnected){statusElement.style.display="none";}else{statusElement.style.display="flex";statusElement.className="echoai-connection-status echoai-connection-disconnected";const indicator=statusElement.querySelector(".echoai-connection-indicator");if(indicator){indicator.innerHTML=`<svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="3"></circle><path d="M12 1v6m0 6v6m11-7h-6m-6 0H1"></path></svg><span>Reconnecting...</span>`;}}}announceStatusChange(status,statusData){let announcement="";switch(status){case "AI_HANDLING": announcement="AI assistant is now handling the conversation";break;case "AWAITING_HUMAN_RESPONSE": announcement=`${statusData.agentName||"Human agent"}has joined the conversation`;break;case "RESOLVED": announcement="Conversation has been resolved";break;}if(announcement){const announcer=document.createElement("div");announcer.className="echoai-sr-only";announcer.setAttribute("aria-live","assertive");announcer.textContent=announcement;document.body.appendChild(announcer);setTimeout(()=>{document.body.removeChild(announcer);},1000);}}showNotification(message,type="info",duration=3000){const existingNotifications=document.querySelectorAll(".echoai-notification");existingNotifications.forEach((notification)=>{notification.remove();});const notification=document.createElement("div");notification.className=`echoai-notification echoai-notification-${type}`;notification.innerHTML=`<div class="echoai-notification-content"><span class="echoai-notification-message">${this.escapeHtml(message)}</span><button class="echoai-notification-close" aria-label="Close notification"><svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg></button></div>`;document.body.appendChild(notification);const closeBtn=notification.querySelector(".echoai-notification-close");const closeNotification=()=>{notification.classList.add("echoai-notification-hiding");setTimeout(()=>{if(notification.parentNode){notification.parentNode.removeChild(notification);}},300);};this.eventManager.addEventListener(closeBtn,"click",closeNotification);if(duration>0){setTimeout(closeNotification,duration);}requestAnimationFrame(()=>{notification.classList.add("echoai-notification-visible");});}formatTimestamp(timestamp){const date=new Date(timestamp);const now=new Date();const diffMs=now-date;const diffMins=Math.floor(diffMs/60000);const diffHours=Math.floor(diffMs/3600000);const diffDays=Math.floor(diffMs/86400000);if(diffMins<1)return "Just now";if(diffMins<60)return `${diffMins}m ago`;if(diffHours<24)return `${diffHours}h ago`;if(diffDays<7)return `${diffDays}d ago`;return date.toLocaleDateString();}getStatusIcon(status){const icons={delivered: `<svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="20,6 9,17 4,12"></polyline></svg>`,pending: `<svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"></circle><polyline points="12,6 12,12 16,14"></polyline></svg>`,failed: `<svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line></svg>`,};return icons[status]||icons.delivered;}createMessageActions(message){const actionsDiv=document.createElement("div");actionsDiv.className="echoai-message-actions";const copyBtn=document.createElement("button");copyBtn.className="echoai-message-action echoai-copy-btn";copyBtn.setAttribute("aria-label","Copy message");copyBtn.title="Copy message";copyBtn.innerHTML=`<svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>`;this.eventManager.addEventListener(copyBtn,"click",()=>{this.copyMessageToClipboard(message);});actionsDiv.appendChild(copyBtn);if(message.role==="assistant"){const feedbackDiv=document.createElement("div");feedbackDiv.className="echoai-message-feedback";const thumbsUpBtn=document.createElement("button");thumbsUpBtn.className="echoai-message-action echoai-feedback-btn echoai-thumbs-up";thumbsUpBtn.setAttribute("aria-label","Good response");thumbsUpBtn.title="Good response";thumbsUpBtn.innerHTML=`<svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"></path></svg>`;const thumbsDownBtn=document.createElement("button");thumbsDownBtn.className="echoai-message-action echoai-feedback-btn echoai-thumbs-down";thumbsDownBtn.setAttribute("aria-label","Poor response");thumbsDownBtn.title="Poor response";thumbsDownBtn.innerHTML=`<svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"></path></svg>`;this.eventManager.addEventListener(thumbsUpBtn,"click",()=>{this.handleMessageFeedback(message.id,"positive");});this.eventManager.addEventListener(thumbsDownBtn,"click",()=>{this.handleMessageFeedback(message.id,"negative");});feedbackDiv.appendChild(thumbsUpBtn);feedbackDiv.appendChild(thumbsDownBtn);actionsDiv.appendChild(feedbackDiv);}return actionsDiv;}async copyMessageToClipboard(message){try{await navigator.clipboard.writeText(message.content);this.showToast("Message copied to clipboard","success");}catch(error){const textArea=document.createElement("textarea");textArea.value=message.content;document.body.appendChild(textArea);textArea.select();document.execCommand("copy");document.body.removeChild(textArea);this.showToast("Message copied to clipboard","success");}}handleMessageFeedback(messageId,feedback){const messageElement=this.container.querySelector(`[data-message-id="${messageId}"]`);if(messageElement){const feedbackBtns=messageElement.querySelectorAll(".echoai-feedback-btn");feedbackBtns.forEach((btn)=>{btn.classList.remove("echoai-feedback-active");});const activeBtn=messageElement.querySelector(`.echoai-${feedback==="positive" ? "thumbs-up" : "thumbs-down"}`);if(activeBtn){activeBtn.classList.add("echoai-feedback-active");}}this.sendMessageFeedback(messageId,feedback);this.showToast(`Thank you for your feedback!`,"success");}async sendMessageFeedback(messageId,feedback){try{console.log(`Feedback for message ${messageId}: ${feedback}`);}catch(error){console.error("Failed to send feedback:",error);}}checkVirtualScrolling(){const currentState=this.stateManager.getState();const shouldEnable=currentState.messages.length>this.virtualScrollingThreshold;if(shouldEnable&&(!this.virtualScrolling||!this.virtualScrolling.isEnabled)){this.enableVirtualScrolling();}else if(!shouldEnable&&this.virtualScrolling&&this.virtualScrolling.isEnabled){this.disableVirtualScrolling();}}enableVirtualScrolling(){if(!this.elements.messagesContainer)return;if(!this.virtualScrolling){this.initializeVirtualScrolling();}this.virtualScrolling.isEnabled=true;this.virtualScrolling.containerHeight=this.elements.messagesContainer.clientHeight;this.scrollListener=()=>{this.updateVirtualScrolling();};this.eventManager.addEventListener(this.elements.messagesContainer,"scroll",this.scrollListener);this.updateVirtualScrolling();}disableVirtualScrolling(){if(!this.virtualScrolling)return;this.virtualScrolling.isEnabled=false;if(this.scrollListener){this.eventManager.removeEventListener(this.elements.messagesContainer,"scroll",this.scrollListener);}this.renderAllMessages();}updateVirtualScrolling(){if(!this.virtualScrolling||!this.virtualScrolling.isEnabled||!this.elements.messagesContainer)return;const{scrollTop,clientHeight}=this.elements.messagesContainer;const{itemHeight,buffer}=this.virtualScrolling;const visibleStart=Math.floor(scrollTop/itemHeight);const visibleEnd=Math.min(visibleStart+Math.ceil(clientHeight/itemHeight),this.stateManager.getState().messages.length-1);this.virtualScrolling.visibleStart=Math.max(0,visibleStart-buffer);this.virtualScrolling.visibleEnd=Math.min(this.stateManager.getState().messages.length-1,visibleEnd+buffer);this.renderVisibleMessages();}renderVisibleMessages(){const currentState=this.stateManager.getState();const{visibleStart,visibleEnd}=this.virtualScrolling;this.elements.messagesContainer.innerHTML="";if(visibleStart>0){const topSpacer=document.createElement("div");topSpacer.style.height=`${visibleStart*this.virtualScrolling.itemHeight}px`;this.elements.messagesContainer.appendChild(topSpacer);}for(let i=visibleStart;i<=visibleEnd;i++){const message=currentState.messages[i];if(message){const messageElement=this.createMessageElement(message);this.elements.messagesContainer.appendChild(messageElement);}}const remainingItems=currentState.messages.length-visibleEnd-1;if(remainingItems>0){const bottomSpacer=document.createElement("div");bottomSpacer.style.height=`${remainingItems*this.virtualScrolling.itemHeight}px`;this.elements.messagesContainer.appendChild(bottomSpacer);}}renderAllMessages(){if(!this.elements.messagesContainer)return;this.elements.messagesContainer.innerHTML="";const currentState=this.stateManager.getState();currentState.messages.forEach((message)=>{const messageElement=this.createMessageElement(message);this.elements.messagesContainer.appendChild(messageElement);});}showToast(message,type="info"){const toast=document.createElement("div");toast.className=`echoai-toast echoai-toast-${type}`;toast.textContent=message;toast.setAttribute("role","alert");toast.setAttribute("aria-live","polite");toast.style.position="fixed";toast.style.top="20px";toast.style.right="20px";toast.style.zIndex="10000";toast.style.padding="12px 16px";toast.style.borderRadius="8px";toast.style.backgroundColor=type==="success" ? "#10b981" : "#3b82f6";toast.style.color="white";toast.style.fontSize="14px";toast.style.boxShadow="0 4px 12px rgba(0,0,0,0.15)";toast.style.transform="translateX(100%)";toast.style.transition="transform 0.3s ease";document.body.appendChild(toast);requestAnimationFrame(()=>{toast.style.transform="translateX(0)";});setTimeout(()=>{toast.style.transform="translateX(100%)";setTimeout(()=>{if(toast.parentNode){toast.parentNode.removeChild(toast);}},300);},3000);}announceMessage(content,role){const announcement=role==="user" ? `You said: ${content}` : `Assistant replied: ${content}`;const announcer=document.createElement("div");announcer.setAttribute("aria-live","polite");announcer.setAttribute("aria-atomic","true");announcer.className="echoai-sr-only";announcer.textContent=announcement;document.body.appendChild(announcer);setTimeout(()=>{document.body.removeChild(announcer);},1000);}addStreamingMessage(messageId,role="assistant"){const timestamp=new Date();const message={id: messageId,content: "",role,timestamp,status: "pending",isStreaming: true,};const currentState=this.stateManager.getState();const updatedMessages=[...currentState.messages,message];this.stateManager.setState({messages: updatedMessages});const messageElement=this.createStreamingMessageElement(message);this.elements.messagesContainer.appendChild(messageElement);this.scrollToBottom();return messageId;}createStreamingMessageElement(message){const messageDiv=document.createElement("div");messageDiv.className=`echoai-message echoai-message-${message.role}echoai-streaming`;messageDiv.setAttribute("data-message-id",message.id);messageDiv.setAttribute("role","article");messageDiv.setAttribute("aria-label",`${message.role}message streaming`);messageDiv.setAttribute("aria-live","polite");const contentDiv=document.createElement("div");contentDiv.className="echoai-message-content";const textDiv=document.createElement("div");textDiv.className="echoai-message-text echoai-streaming-text";contentDiv.appendChild(textDiv);if(this.config.streamingConfig?.showTypingIndicator){const cursor=document.createElement("span");cursor.className="echoai-streaming-cursor";cursor.textContent="|";cursor.style.marginLeft="2px";cursor.style.fontWeight="bold";contentDiv.appendChild(cursor);this.animateStreamingCursor(cursor);}messageDiv.appendChild(contentDiv);const timeDiv=document.createElement("div");timeDiv.className="echoai-message-time";timeDiv.textContent=this.formatTimestamp(message.timestamp);messageDiv.appendChild(timeDiv);return messageDiv;}updateStreamingMessage(messageId,content){const messageElement=this.container.querySelector(`[data-message-id="${messageId}"]`);if(!messageElement)return;const textElement=messageElement.querySelector(".echoai-streaming-text");if(textElement){if(this.config.streamingConfig?.enableTokenAnimation){this.animateTyping(textElement,content);}else{textElement.innerHTML=this.formatMessageContent(content);}}const currentState=this.stateManager.getState();const updatedMessages=currentState.messages.map((msg)=>msg.id===messageId ?{...msg,content}: msg);this.stateManager.setState({messages: updatedMessages});this.scrollToBottom();}animateTyping(element,newContent){const currentContent=element.textContent||"";const targetContent=newContent;if(targetContent.length<=currentContent.length){element.innerHTML=this.formatMessageContent(targetContent);return;}if(element._typingAnimation){clearTimeout(element._typingAnimation);}const newChars=targetContent.slice(currentContent.length);const speed=this.config.streamingConfig?.typingSpeed||30;const chunkSize=Math.max(1,Math.floor(newChars.length/20));let charIndex=0;const typeChunk=()=>{if(charIndex<newChars.length){const nextChunkEnd=Math.min(charIndex+chunkSize,newChars.length);const contentToShow=currentContent+newChars.slice(0,nextChunkEnd);element.innerHTML=this.formatMessageContent(contentToShow);charIndex=nextChunkEnd;element._typingAnimation=setTimeout(typeChunk,speed);}else{delete element._typingAnimation;}};typeChunk();}animateStreamingCursor(cursorElement){if(!cursorElement||cursorElement._cursorAnimation)return;let visible=true;const blink=()=>{cursorElement.style.opacity=visible ? "1" : "0";visible=!visible;cursorElement._cursorAnimation=setTimeout(blink,500);};blink();}stopStreamingCursor(cursorElement){if(cursorElement&&cursorElement._cursorAnimation){clearTimeout(cursorElement._cursorAnimation);delete cursorElement._cursorAnimation;cursorElement.style.opacity="0";}}finalizeStreamingMessage(messageId,finalContent){const messageElement=this.container.querySelector(`[data-message-id="${messageId}"]`);if(!messageElement)return;const textElement=messageElement.querySelector(".echoai-streaming-text");if(textElement&&textElement._typingAnimation){clearTimeout(textElement._typingAnimation);delete textElement._typingAnimation;}const cursor=messageElement.querySelector(".echoai-streaming-cursor");if(cursor){this.stopStreamingCursor(cursor);cursor.remove();}messageElement.classList.remove("echoai-streaming");if(textElement){textElement.className="echoai-message-text";textElement.innerHTML=this.formatMessageContent(finalContent);}const statusDiv=messageElement.querySelector(".echoai-message-status");if(statusDiv){statusDiv.innerHTML=this.getStatusIcon("delivered");}const existingActions=messageElement.querySelector(".echoai-message-actions");if(!existingActions){const message={id: messageId,content: finalContent,role: "assistant",timestamp: new Date(),};const actionsDiv=this.createMessageActions(message);messageElement.appendChild(actionsDiv);}const currentState=this.stateManager.getState();const updatedMessages=currentState.messages.map((msg)=>msg.id===messageId ?{...msg,content: finalContent,status: "delivered",isStreaming: false,}: msg);this.stateManager.setState({messages: updatedMessages});this.scrollToBottom();}showStreamingControls(){if(!this.elements.messagesContainer)return;this.hideStreamingControls();const controlsDiv=document.createElement("div");controlsDiv.className="echoai-streaming-controls";controlsDiv.innerHTML=`<button class="echoai-cancel-streaming-btn" aria-label="Cancel streaming"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line></svg>Cancel</button>`;const inputContainer=this.container.querySelector(".echoai-input-container");if(inputContainer){inputContainer.appendChild(controlsDiv);}const cancelBtn=controlsDiv.querySelector(".echoai-cancel-streaming-btn");if(cancelBtn&&window.EchoAI){this.eventManager.addEventListener(cancelBtn,"click",()=>{if(window.EchoAI.cancelStreaming){window.EchoAI.cancelStreaming();}});}}hideStreamingControls(){const existingControls=this.container.querySelector(".echoai-streaming-controls");if(existingControls){existingControls.remove();}}removeStreamingMessage(messageId){const messageElement=this.container.querySelector(`[data-message-id="${messageId}"]`);if(messageElement){messageElement.remove();}const currentState=this.stateManager.getState();const updatedMessages=currentState.messages.filter((msg)=>msg.id!==messageId);this.stateManager.setState({messages: updatedMessages});}showTyping(){if(!this.elements.messagesContainer)return;const typingHTML=this.renderTemplate("message.typing");const tempDiv=document.createElement("div");tempDiv.innerHTML=typingHTML;const typingElement=tempDiv.firstElementChild;this.elements.messagesContainer.appendChild(typingElement);this.scrollToBottom();}hideTyping(){const typing=this.container.querySelector(".echoai-typing");if(typing){typing.remove();}}scrollToBottom(){if(this.elements.messagesContainer){this.elements.messagesContainer.scrollTop=this.elements.messagesContainer.scrollHeight;}}clearInput(){if(this.elements.input){this.elements.input.value="";}if(this.config.enableImageUpload){this.clearImageUpload();}}applySettings(settings){const botName=this.container.querySelector(".echoai-bot-name");if(botName&&settings.name){botName.textContent=settings.name;}if(settings.welcomeMessage){this.welcomeMessage=settings.welcomeMessage;}if(settings.primaryColor){this.themeManager.generateColorTheme(settings.primaryColor);}if(settings.chatbotName){const botNameElement=this.container.querySelector(".echoai-bot-name");if(botNameElement){botNameElement.textContent=settings.chatbotName;}}}updateTheme(theme){this.container.classList.remove("echoai-theme-light","echoai-theme-dark","echoai-theme-auto");this.container.classList.add(`echoai-theme-${theme}`);this.config.theme=theme;this.themeManager.config.theme=theme;this.themeManager.detectAndApplyColorScheme();}updatePrimaryColor(color){this.themeManager.generateColorTheme(color);this.config.primaryColor=color;}updateIntelligencePanel(enhancedData){const intelligencePanel=this.container.querySelector("#echoai-intelligence-panel");if(!intelligencePanel)return;let hasContent=false;let panelHTML="";if(enhancedData.proactive_questions&&enhancedData.proactive_questions.length>0&&this.config.intelligenceConfig?.showProactiveQuestions){panelHTML+=this.renderTemplate("intelligence.proactiveQuestions",enhancedData.proactive_questions);hasContent=true;}if(enhancedData.suggested_topics&&enhancedData.suggested_topics.length>0&&this.config.intelligenceConfig?.showSuggestedTopics){panelHTML+=this.renderTemplate("intelligence.suggestedTopics",enhancedData.suggested_topics);hasContent=true;}if(enhancedData.conversation_actions&&enhancedData.conversation_actions.length>0&&this.config.intelligenceConfig?.showConversationActions){panelHTML+=this.renderTemplate("intelligence.conversationActions",enhancedData.conversation_actions);hasContent=true;}intelligencePanel.innerHTML=panelHTML;intelligencePanel.style.display=hasContent ? "block" : "none";if(hasContent){this.setupIntelligenceEventListeners();}}setupIntelligenceEventListeners(){const questionButtons=this.container.querySelectorAll(".echoai-proactive-btn");questionButtons.forEach((button)=>{this.eventManager.addEventListener(button,"click",()=>{const question=button.getAttribute("data-question");if(question&&window.EchoAI&&window.EchoAI.sendMessage){window.EchoAI.sendMessage(question);}});});const topicButtons=this.container.querySelectorAll(".echoai-topic-btn");topicButtons.forEach((button)=>{this.eventManager.addEventListener(button,"click",()=>{const topic=button.getAttribute("data-topic");if(topic&&window.EchoAI&&window.EchoAI.sendMessage){window.EchoAI.sendMessage(`Tell me about ${topic}`);}});});const actionButtons=this.container.querySelectorAll(".echoai-action-btn");actionButtons.forEach((button)=>{this.eventManager.addEventListener(button,"click",()=>{const actionType=button.getAttribute("data-action-type");const content=button.getAttribute("data-content");if(window.EchoAI&&window.EchoAI.handleAction){window.EchoAI.handleAction(actionType,content);}});});}cleanup(){if(this.container&&this.container.parentNode){this.container.parentNode.removeChild(this.container);}}}window.EchoAI={init: function(config){if(!config||!config.chatbotId||!config.apiKey){console.error("EchoAI: Missing required configuration(chatbotId,apiKey)");return;}this.config={chatbotId: config.chatbotId,apiKey: config.apiKey,position: config.position||"bottom-right",theme: config.theme||"auto",showBranding: config.showBranding!==false,apiUrl: config.apiUrl||window.location.origin+"/api/enhanced-chat/widget",enableEnhancedFeatures: config.enableEnhancedFeatures!==false,enableImageUpload: config.enableImageUpload!==false,enableFAQ: config.enableFAQ!==false,enableHistory: config.enableHistory!==false,streamingConfig:{enabled: config.streamingConfig?.enabled!==false,typingSpeed: config.streamingConfig?.typingSpeed||30,showTypingIndicator: config.streamingConfig?.showTypingIndicator!==false,enableTokenAnimation: config.streamingConfig?.enableTokenAnimation!==false,fallbackToRegular: config.streamingConfig?.fallbackToRegular!==false,retryAttempts: config.streamingConfig?.retryAttempts||2,connectionTimeout: config.streamingConfig?.connectionTimeout||30000,},intelligenceConfig:{enabled: config.intelligenceConfig?.enabled!==false,showProactiveQuestions: config.intelligenceConfig?.showProactiveQuestions!==false,showSuggestedTopics: config.intelligenceConfig?.showSuggestedTopics!==false,showConversationActions: config.intelligenceConfig?.showConversationActions!==false,showIntelligenceMetrics: config.intelligenceConfig?.showIntelligenceMetrics||false,},leadCollectionConfig:{enabled: config.leadCollectionConfig?.enabled!==false,collectEmail: config.leadCollectionConfig?.collectEmail!==false,collectPhone: config.leadCollectionConfig?.collectPhone||false,collectCompany: config.leadCollectionConfig?.collectCompany!==false,progressiveCollection: config.leadCollectionConfig?.progressiveCollection!==false,},escalationConfig:{enabled: config.escalationConfig?.enabled!==false,showEscalationButton: config.escalationConfig?.showEscalationButton!==false,escalationThreshold: config.escalationConfig?.escalationThreshold||0.7,humanAgentAvailable: config.escalationConfig?.humanAgentAvailable!==false,},chatbotName: config.chatbotName,welcomeMessage: config.welcomeMessage,primaryColor: config.primaryColor,};this.stateManager=new StateManager();this.eventManager=new EventManager();this.apiClient=new APIClient(this.config);this.uiManager=new UIManager(this.config,this.stateManager,this.eventManager);this.realtimeManager=new RealtimeManager(this.config,this.stateManager,this.eventManager);this.createWidget();this.loadStyles();},createWidget: function(){this.container=this.uiManager.createWidget();this.initializeWidget();},destroy: function(){if(this.realtimeManager){this.realtimeManager.cleanup();}if(this.eventManager){this.eventManager.cleanup();}if(this.apiClient){this.apiClient.cleanup();}if(this.uiManager){this.uiManager.cleanup();}this.stateManager=null;this.eventManager=null;this.apiClient=null;this.uiManager=null;this.realtimeManager=null;this.container=null;},initializeWidget: function(){this.loadChatbotSettings();this.setupEventListeners();this.setupStateSubscriptions();},setupEventListeners: function(){const elements=this.uiManager.elements;elements.tabs.forEach((tab,index)=>{this.eventManager.addEventListener(tab,"click",()=>{const targetTab=tab.dataset.tab;this.uiManager.switchTab(targetTab);});this.eventManager.addEventListener(tab,"keydown",(e)=>{let targetIndex=index;let shouldPreventDefault=true;switch(e.key){case "ArrowLeft": targetIndex=index>0 ? index-1 : elements.tabs.length-1;break;case "ArrowRight": targetIndex=index<elements.tabs.length-1 ? index+1 : 0;break;case "Home": targetIndex=0;break;case "End": targetIndex=elements.tabs.length-1;break;case "Enter": case " ": const targetTab=tab.dataset.tab;this.uiManager.switchTab(targetTab);break;default: shouldPreventDefault=false;}if(shouldPreventDefault){e.preventDefault();if(["ArrowLeft","ArrowRight","Home","End"].includes(e.key)){const targetTab=elements.tabs[targetIndex];targetTab.focus();elements.tabs.forEach((t,i)=>{t.setAttribute("tabindex",i===targetIndex ? "0" : "-1");});}}});});const toggleWidget=()=>{const currentState=this.stateManager.getState();const newIsOpen=!currentState.isOpen;this.stateManager.setState({isOpen: newIsOpen});this.uiManager.updateWidgetVisibility(newIsOpen);if(newIsOpen){this.initializeSession().then(()=>{const messages=this.stateManager.getState().messages;if(messages.length===0){this.addWelcomeMessage();}});}else{if(this.stateManager.getState().isStreaming){this.apiClient.cancelStreaming();this.stateManager.setState({isStreaming: false});}}};this.eventManager.addEventListener(elements.toggleBtn,"click",toggleWidget);this.eventManager.addEventListener(elements.closeBtn,"click",toggleWidget);if(this.config.enableImageUpload&&elements.uploadBtn){this.eventManager.addEventListener(elements.uploadBtn,"click",()=>{elements.fileInput.click();});if(elements.browseBtn){this.eventManager.addEventListener(elements.browseBtn,"click",(e)=>{e.preventDefault();elements.fileInput.click();});}this.eventManager.addEventListener(elements.fileInput,"change",(e)=>{const file=e.target.files[0];if(file){this.handleFileSelection(file);}});this.eventManager.addEventListener(elements.removeImageBtn,"click",()=>{this.uiManager.clearImageUpload();});const chatContainer=elements.widget.querySelector(".echoai-chat-container");if(chatContainer){["dragenter","dragover","dragleave","drop"].forEach((eventName)=>{this.eventManager.addEventListener(chatContainer,eventName,(e)=>{e.preventDefault();e.stopPropagation();});});["dragenter","dragover"].forEach((eventName)=>{this.eventManager.addEventListener(chatContainer,eventName,()=>{chatContainer.classList.add("echoai-drag-over");this.uiManager.showDragDropArea();});});["dragleave","drop"].forEach((eventName)=>{this.eventManager.addEventListener(chatContainer,eventName,()=>{chatContainer.classList.remove("echoai-drag-over");if(eventName==="dragleave"){setTimeout(()=>{if(!chatContainer.classList.contains("echoai-drag-over")){this.uiManager.hideDragDropArea();}},100);}});});this.eventManager.addEventListener(chatContainer,"drop",(e)=>{const files=e.dataTransfer.files;if(files.length>0){this.handleFileSelection(files[0]);}this.uiManager.hideDragDropArea();});}}if(this.config.escalationConfig.enabled&&elements.escalateBtn){this.eventManager.addEventListener(elements.escalateBtn,"click",()=>{this.handleEscalation("user_request");});}const sendMessage=async(messageContent)=>{const message=messageContent||elements.input.value.trim();const hasImage=elements.fileInput&&elements.fileInput.files.length>0;if(!message&&!hasImage)return;const currentState=this.stateManager.getState();if(currentState.isLoading||currentState.isStreaming)return;let imageUrl=null;try{if(hasImage){this.stateManager.setState({isLoading: true});this.uiManager.showUploadProgress(true);this.uiManager.updateUploadProgress(0);try{const uploadData=await this.apiClient.uploadImage(elements.fileInput.files[0],(progress)=>{this.uiManager.updateUploadProgress(progress);});imageUrl=uploadData.url;this.uiManager.updateUploadProgress(100);await new Promise((resolve)=>setTimeout(resolve,500));}catch(uploadError){console.error("EchoAI: Image upload failed:",uploadError);this.uiManager.showUploadError("Failed to upload image. Please try again.");this.stateManager.setState({isLoading: false});return;}finally{this.uiManager.showUploadProgress(false);}this.stateManager.setState({isLoading: false});}const userMessageId=this.uiManager.addMessage(message,"user",imageUrl);if(userMessageId&&this.realtimeManager){this.trackMessageDelivery(userMessageId);}this.uiManager.clearInput();if(this.config.streamingConfig.enabled){try{await this.sendStreamingMessage(message,imageUrl);}catch(streamingError){console.warn("EchoAI: Streaming failed,attempting fallback:",streamingError);if(this.config.streamingConfig.fallbackToRegular){await this.sendRegularMessage(message,imageUrl);}else{throw streamingError;}}}else{await this.sendRegularMessage(message,imageUrl);}}catch(error){console.error("EchoAI: Error sending message:",error);this.uiManager.hideTyping();this.stateManager.setState({isLoading: false,isStreaming: false});this.uiManager.addMessage("Sorry,I encountered an error. Please try again.","assistant");}};this.eventManager.addEventListener(elements.sendBtn,"click",()=>sendMessage());this.eventManager.addEventListener(elements.input,"keypress",(e)=>{if(e.key==="Enter"&&!e.shiftKey){e.preventDefault();sendMessage();}});this.sendMessage=sendMessage;},getConversationStatus: function(){if(this.realtimeManager){return this.realtimeManager.getCurrentStatus();}return this.stateManager.getState().conversationStatus;},isHumanAgentActive: function(){if(this.realtimeManager){return this.realtimeManager.isHumanAgentActive();}return(this.stateManager.getState().conversationStatus==="AWAITING_HUMAN_RESPONSE");},isConversationResolved: function(){if(this.realtimeManager){return this.realtimeManager.isConversationResolved();}return this.stateManager.getState().conversationStatus==="RESOLVED";},onStatusChange: function(callback){if(this.realtimeManager){return this.realtimeManager.onStatusUpdate(callback);}return this.stateManager.subscribe("conversationStatus",callback);},getConnectionStatus: function(){if(this.realtimeManager){return this.realtimeManager.getConnectionStatus();}const state=this.stateManager.getState();return{isConnected: state.realtimeConnected,connectionType: null,reconnectAttempts: 0,lastHeartbeat: null,conversationStatus: state.conversationStatus,};},reconnectRealtime: function(){if(this.realtimeManager){this.realtimeManager.reconnect();}},trackMessageDelivery: function(messageId){if(this.realtimeManager){this.realtimeManager.trackMessageDelivery(messageId);}},handleEscalation: function(reason){const currentStatus=this.getConversationStatus();if(currentStatus==="AWAITING_HUMAN_RESPONSE"){this.uiManager.showNotification("You are already connected to a human agent","info",3000);return;}if(currentStatus==="RESOLVED"){this.uiManager.showNotification("This conversation has been resolved. Please start a new conversation for further assistance.","info",4000);return;}this.showEscalationDialog(reason);},showEscalationDialog: function(defaultReason=""){const dialog=document.createElement("div");dialog.className="echoai-escalation-dialog";dialog.innerHTML=`<div class="echoai-dialog-overlay"><div class="echoai-dialog-content"><div class="echoai-dialog-header"><h3>Request Human Support</h3><button class="echoai-dialog-close" aria-label="Close dialog"><svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg></button></div><div class="echoai-dialog-body"><p>Please let us know why you'd like to speak with a human agent:</p><textarea class="echoai-escalation-reason" placeholder="Describe your issue or question..." rows="3">${defaultReason}</textarea></div><div class="echoai-dialog-footer"><button class="echoai-btn echoai-btn-secondary echoai-cancel-escalation">Cancel</button><button class="echoai-btn echoai-btn-primary echoai-submit-escalation">Request Support</button></div></div></div>`;document.body.appendChild(dialog);const closeDialog=()=>{dialog.classList.add("echoai-dialog-hiding");setTimeout(()=>{if(dialog.parentNode){dialog.parentNode.removeChild(dialog);}},300);};const closeBtn=dialog.querySelector(".echoai-dialog-close");const cancelBtn=dialog.querySelector(".echoai-cancel-escalation");const submitBtn=dialog.querySelector(".echoai-submit-escalation");const reasonTextarea=dialog.querySelector(".echoai-escalation-reason");this.eventManager.addEventListener(closeBtn,"click",closeDialog);this.eventManager.addEventListener(cancelBtn,"click",closeDialog);this.eventManager.addEventListener(submitBtn,"click",async()=>{const reason=reasonTextarea.value.trim();if(!reason){this.uiManager.showNotification("Please provide a reason for escalation","warning",3000);return;}try{submitBtn.disabled=true;submitBtn.textContent="Requesting...";await this.submitEscalation(reason);closeDialog();this.uiManager.showNotification("Your request has been submitted. A human agent will join shortly.","success",5000);}catch(error){console.error("EchoAI: Escalation failed:",error);this.uiManager.showNotification("Failed to submit escalation request. Please try again.","error",4000);submitBtn.disabled=false;submitBtn.textContent="Request Support";}});requestAnimationFrame(()=>{dialog.classList.add("echoai-dialog-visible");});setTimeout(()=>{reasonTextarea.focus();},100);},submitEscalation: async function(reason){const conversationId=this.stateManager.getState().conversationId;if(!conversationId){throw new Error("No active conversation");}try{await this.apiClient.escalate(conversationId,reason);this.stateManager.setState({conversationStatus: "AWAITING_HUMAN_RESPONSE",});this.uiManager.addMessage(`You've requested human support. An agent will join the conversation shortly.`,"assistant",null,{isSystemMessage: true,timestamp: new Date(),});}catch(error){console.error("EchoAI: Failed to submit escalation:",error);throw error;}},addFAQToChat: function(question,answer){this.uiManager.addMessage(question,"user");this.uiManager.addMessage(answer,"assistant",null,{isFAQAnswer: true,timestamp: new Date(),});this.uiManager.scrollToBottom();},loadConversation: async function(sessionId){if(!sessionId){console.error("EchoAI: No session ID provided for conversation loading");return;}try{this.stateManager.setState({isLoading: true});const conversation=await this.apiClient.loadConversation(sessionId);if(!conversation){throw new Error("No conversation data received");}this.stateManager.setState({messages: [],conversationId: sessionId,conversationStatus: conversation.status||"AI_HANDLING",});this.uiManager.clearMessages();if(conversation.messages&&conversation.messages.length>0){const sortedMessages=conversation.messages.sort((a,b)=>new Date(a.createdAt)-new Date(b.createdAt));sortedMessages.forEach((msg)=>{this.uiManager.addMessage(msg.content,msg.role,msg.imageUrl,{id: msg.id,timestamp: new Date(msg.createdAt),status: "delivered",metadata: msg.metadata,});});this.stateManager.setState({messages: sortedMessages.map(msg=>({id: msg.id,content: msg.content,role: msg.role,timestamp: new Date(msg.createdAt),imageUrl: msg.imageUrl,status: "delivered",metadata: msg.metadata,}))});}if(conversation.metadata){this.stateManager.setState({intelligenceMetadata: conversation.metadata.intelligence,proactiveQuestions: conversation.metadata.proactiveQuestions||[],suggestedTopics: conversation.metadata.suggestedTopics||[],conversationActions: conversation.metadata.conversationActions||[],});}this.uiManager.scrollToBottom();if(this.realtimeManager){this.realtimeManager.authenticateConnection();}this.stateManager.setState({isLoading: false});this.uiManager.showNotification("Conversation loaded successfully","success",2000);this.eventManager.emit("conversation-loaded",{sessionId: sessionId,messageCount: conversation.messages?.length||0,});}catch(error){console.error("EchoAI: Failed to load conversation:",error);this.stateManager.setState({isLoading: false});let errorMessage="Failed to load conversation";if(error.message.includes("404")){errorMessage="Conversation not found";}else if(error.message.includes("403")){errorMessage="Access denied to conversation";}else if(error.message.includes("network")){errorMessage="Network error loading conversation";}this.uiManager.showNotification(errorMessage,"error",3000);this.eventManager.emit("conversation-load-error",{sessionId: sessionId,error: error.message,});}},setupTabKeyboardNavigation: function(){const elements=this.uiManager.elements;if(elements.tabs.length>0){elements.tabs.forEach((tab,index)=>{const isActive=tab.classList.contains("echoai-tab-active");tab.setAttribute("tabindex",isActive ? "0" : "-1");});}},switchToTab: function(tabId){if(this.uiManager){this.uiManager.switchTab(tabId);}},refreshTabContent: function(tabId){if(this.uiManager){this.uiManager.refreshTabContent(tabId);}},setupStateSubscriptions: function(){this.stateManager.subscribe("isOpen",(isOpen)=>{this.uiManager.updateWidgetVisibility(isOpen);});this.stateManager.subscribe("activeTab",(activeTab)=>{});this.stateManager.subscribe("isStreaming",(isStreaming)=>{});this.stateManager.subscribe("conversationStatus",(status,previousStatus)=>{console.log(`EchoAI: Conversation status changed from ${previousStatus}to ${status}`);if(this.uiManager){this.uiManager.updateConversationStatus(status);}});this.stateManager.subscribe("realtimeConnected",(isConnected,wasConnected)=>{console.log(`EchoAI: Realtime connection ${isConnected ? "established" : "lost"}`);if(this.uiManager){this.uiManager.updateConnectionStatus(isConnected);}});this.stateManager.subscribe("realtimeError",(error,previousError)=>{if(error&&error!==previousError){console.error("EchoAI: Realtime error:",error);if(this.uiManager){this.uiManager.showNotification("Connection issue detected. Attempting to reconnect...","warning",5000);}}});this.setupRealtimeEventListeners();},setupRealtimeEventListeners: function(){if(!this.realtimeManager)return;this.eventManager.on("realtime-connected",(data)=>{console.log("EchoAI: Realtime connected via",data.connectionType);if(this.uiManager){this.uiManager.showNotification("Connected to live chat","success",2000);}});this.eventManager.on("realtime-disconnected",(data)=>{console.log("EchoAI: Realtime disconnected:",data.reason);if(this.uiManager){this.uiManager.showNotification("Connection lost. Attempting to reconnect...","warning",3000);}});this.eventManager.on("realtime-error",(data)=>{console.error("EchoAI: Realtime error:",data.error);});this.eventManager.on("message-received",(data)=>{console.log("EchoAI: Message received from agent:",data.message);if(this.uiManager){this.uiManager.scrollToBottom();const currentState=this.stateManager.getState();if(!currentState.isOpen){this.uiManager.showNotification("New message from agent","info",4000);}}});this.eventManager.on("conversation-status-changed",(data)=>{console.log("EchoAI: Conversation status changed:",data);if(this.uiManager){switch(data.status){case "AWAITING_HUMAN_RESPONSE": this.uiManager.showNotification(`${data.data.agentName||"Human agent"}has joined the conversation`,"info",4000);break;case "AI_HANDLING": this.uiManager.showNotification("AI assistant is now handling your conversation","info",3000);break;case "RESOLVED": this.uiManager.showNotification("Conversation has been resolved","success",4000);break;}}});this.eventManager.on("message-delivered",(data)=>{console.log("EchoAI: Message delivered:",data.messageId);});this.eventManager.on("message-delivery-failed",(data)=>{console.warn("EchoAI: Message delivery failed:",data.messageId);if(this.uiManager){this.uiManager.showNotification("Message delivery failed. Please check your connection.","error",5000);}});},initializeSession: async function(){const currentState=this.stateManager.getState();if(currentState.conversationId)return currentState.conversationId;try{const sessionId=await this.apiClient.initializeSession();this.stateManager.setState({conversationId: sessionId});return sessionId;}catch(error){console.error("EchoAI: Failed to initialize session:",error);return null;}},sendStreamingMessage: async function(message,imageUrl){this.stateManager.setState({isStreaming: true});let assistantMessageId=`assistant-${Date.now()}`;let fullResponse="";let enhancedData=null;let streamingStarted=false;this.uiManager.showStreamingControls();try{this.uiManager.addStreamingMessage(assistantMessageId);streamingStarted=true;await this.apiClient.createStreamingConnection(message,imageUrl,(token)=>{fullResponse+=token;this.uiManager.updateStreamingMessage(assistantMessageId,fullResponse);},(data)=>{enhancedData=data;},()=>{this.uiManager.finalizeStreamingMessage(assistantMessageId,fullResponse);if(enhancedData&&this.config.enableEnhancedFeatures){this.handleEnhancedResponse(enhancedData);}if(enhancedData&&enhancedData.conversation_id){this.stateManager.setState({conversationId: enhancedData.conversation_id,});}this.stateManager.setState({isStreaming: false});this.uiManager.hideStreamingControls();},(error)=>{console.error("EchoAI: Streaming error:",error);if(error.message==="Streaming cancelled"){if(streamingStarted){this.uiManager.removeStreamingMessage(assistantMessageId);}}else{if(streamingStarted){this.uiManager.removeStreamingMessage(assistantMessageId);}this.attemptFallbackMessage(message,imageUrl,error);}this.stateManager.setState({isStreaming: false});this.uiManager.hideStreamingControls();});}catch(error){console.error("EchoAI: Streaming setup error:",error);if(streamingStarted){this.uiManager.removeStreamingMessage(assistantMessageId);}this.attemptFallbackMessage(message,imageUrl,error);this.stateManager.setState({isStreaming: false});this.uiManager.hideStreamingControls();}},handleEnhancedResponse: function(enhancedData){console.log("EchoAI: Processing enhanced response data:",enhancedData);this.stateManager.setState({proactiveQuestions: enhancedData.proactive_questions||[],suggestedTopics: enhancedData.suggested_topics||[],conversationActions: enhancedData.conversation_actions||[],intelligenceMetadata: enhancedData.intelligence_metadata||null,});if(this.config.intelligenceConfig?.enabled){this.showIntelligencePanel(enhancedData);}if(this.config.escalationConfig?.enabled){this.checkEscalationTriggers(enhancedData);}this.eventManager.emit("enhanced-data-received",enhancedData);},showIntelligencePanel: function(enhancedData){this.hideIntelligencePanel();const chatPanel=this.container.querySelector('[data-panel="chat"]');if(!chatPanel)return;const intelligencePanel=document.createElement("div");intelligencePanel.className="echoai-intelligence-panel";intelligencePanel.id="echoai-intelligence-panel";let panelContent="";if(this.config.intelligenceConfig?.showProactiveQuestions&&enhancedData.proactive_questions&&enhancedData.proactive_questions.length>0){panelContent+=`<div class="echoai-intelligence-section"><h4>Suggested Questions</h4><div class="echoai-question-buttons">${enhancedData.proactive_questions .map((question,index)=>`<button class="echoai-proactive-btn" data-question="${this.escapeHtml(question)}" data-index="${index}" aria-label="Ask: ${this.escapeHtml(question)}">${this.escapeHtml(question)}</button>`).join("")}</div></div>`;}if(this.config.intelligenceConfig?.showSuggestedTopics&&enhancedData.suggested_topics&&enhancedData.suggested_topics.length>0){panelContent+=`<div class="echoai-intelligence-section"><h4>Related Topics</h4><div class="echoai-topic-buttons">${enhancedData.suggested_topics .map((topic,index)=>`<button class="echoai-topic-btn" data-topic="${this.escapeHtml(topic)}" data-index="${index}" aria-label="Explore topic: ${this.escapeHtml(topic)}">${this.escapeHtml(topic)}</button>`).join("")}</div></div>`;}if(this.config.intelligenceConfig?.showConversationActions&&enhancedData.conversation_actions&&enhancedData.conversation_actions.length>0){panelContent+=`<div class="echoai-intelligence-section"><h4>Suggested Actions</h4><div class="echoai-action-buttons">${enhancedData.conversation_actions .map((action,index)=>`<button class="echoai-action-btn" data-action="${this.escapeHtml(action.action||action)}" data-confidence="${action.confidence_score||0}" data-index="${index}" aria-label="Action: ${this.escapeHtml(action.action||action)}(${Math.round((action.confidence_score||0)*100)}% confidence)">${this.escapeHtml(action.action||action)}${action.confidence_score ? `<span class="echoai-confidence-score">${Math.round(action.confidence_score*100)}%</span>` : ""}</button>`).join("")}</div></div>`;}if(this.config.intelligenceConfig?.showIntelligenceMetrics&&enhancedData.intelligence_metadata){const metadata=enhancedData.intelligence_metadata;panelContent+=`<div class="echoai-intelligence-section echoai-debug-section"><h4>Intelligence Metrics</h4><div class="echoai-intelligence-metrics">${metadata.confidence_score ? `<div class="echoai-metric">Confidence: ${Math.round(metadata.confidence_score*100)}%</div>` : ""}${metadata.sentiment ? `<div class="echoai-metric">Sentiment: ${this.escapeHtml(metadata.sentiment)}</div>` : ""}${metadata.risk_score ? `<div class="echoai-metric">Risk Score: ${Math.round(metadata.risk_score*100)}%</div>` : ""}${metadata.escalation_likelihood ? `<div class="echoai-metric">Escalation Risk: ${Math.round(metadata.escalation_likelihood*100)}%</div>` : ""}${enhancedData.sources_count ? `<div class="echoai-metric">Sources Used: ${enhancedData.sources_count}</div>` : ""}</div></div>`;}if(panelContent.trim()){intelligencePanel.innerHTML=panelContent;const inputContainer=chatPanel.querySelector(".echoai-input-container");if(inputContainer){chatPanel.insertBefore(intelligencePanel,inputContainer);}else{chatPanel.appendChild(intelligencePanel);}this.setupIntelligencePanelEventListeners(intelligencePanel,enhancedData);requestAnimationFrame(()=>{intelligencePanel.style.opacity="0";intelligencePanel.style.transform="translateY(10px)";intelligencePanel.style.transition="all 0.3s ease";requestAnimationFrame(()=>{intelligencePanel.style.opacity="1";intelligencePanel.style.transform="translateY(0)";});});if(this.config.intelligenceConfig?.autoHideDelay){setTimeout(()=>{this.hideIntelligencePanel();},this.config.intelligenceConfig.autoHideDelay);}}},setupIntelligencePanelEventListeners: function(panel,enhancedData){const questionButtons=panel.querySelectorAll(".echoai-proactive-btn");questionButtons.forEach((button)=>{this.eventManager.addEventListener(button,"click",()=>{const question=button.getAttribute("data-question");if(question){this.handleProactiveQuestionClick(question);}});this.eventManager.addEventListener(button,"keydown",(e)=>{if(e.key==="Enter"||e.key===" "){e.preventDefault();button.click();}});});const topicButtons=panel.querySelectorAll(".echoai-topic-btn");topicButtons.forEach((button)=>{this.eventManager.addEventListener(button,"click",()=>{const topic=button.getAttribute("data-topic");if(topic){this.handleTopicClick(topic);}});this.eventManager.addEventListener(button,"keydown",(e)=>{if(e.key==="Enter"||e.key===" "){e.preventDefault();button.click();}});});const actionButtons=panel.querySelectorAll(".echoai-action-btn");actionButtons.forEach((button)=>{this.eventManager.addEventListener(button,"click",()=>{const action=button.getAttribute("data-action");const confidence=parseFloat(button.getAttribute("data-confidence"))||0;if(action){this.handleConversationActionClick(action,confidence);}});this.eventManager.addEventListener(button,"keydown",(e)=>{if(e.key==="Enter"||e.key===" "){e.preventDefault();button.click();}});});},handleProactiveQuestionClick: function(question){console.log("EchoAI: Proactive question clicked:",question);this.uiManager.addMessage(question,"user");if(this.elements&&this.elements.input){this.elements.input.value="";}if(this.sendMessage){this.sendMessage(question);}this.hideIntelligencePanel();this.eventManager.emit("proactive-question-clicked",{question});},handleTopicClick: function(topic){console.log("EchoAI: Topic clicked:",topic);const topicQuestion=`Tell me more about ${topic}`;this.uiManager.addMessage(topicQuestion,"user");if(this.elements&&this.elements.input){this.elements.input.value="";}if(this.sendMessage){this.sendMessage(topicQuestion);}this.hideIntelligencePanel();this.eventManager.emit("topic-clicked",{topic,question: topicQuestion,});},handleConversationActionClick: function(action,confidence){console.log("EchoAI: Conversation action clicked:",action,"confidence:",confidence);switch(action.toLowerCase()){case "escalate": case "escalate to human": case "request human support": this.handleEscalation("intelligence_suggestion");break;case "collect contact info": case "collect lead information": this.showLeadCollectionDialog();break;case "schedule callback": case "schedule meeting": this.handleSchedulingAction(action);break;case "provide documentation": case "share resources": this.handleResourceSharingAction(action);break;default: const actionMessage=`I'd like to ${action.toLowerCase()}`;this.uiManager.addMessage(actionMessage,"user");if(this.sendMessage){this.sendMessage(actionMessage);}break;}this.hideIntelligencePanel();this.eventManager.emit("conversation-action-clicked",{action,confidence,});},handleSchedulingAction: function(action){const schedulingMessage=`I'd like to ${action.toLowerCase()}. What are your available times?`;this.uiManager.addMessage(schedulingMessage,"user");if(this.sendMessage){this.sendMessage(schedulingMessage);}},handleResourceSharingAction: function(action){const resourceMessage=`Could you ${action.toLowerCase()}that might help me?`;this.uiManager.addMessage(resourceMessage,"user");if(this.sendMessage){this.sendMessage(resourceMessage);}},hideIntelligencePanel: function(){const existingPanel=document.getElementById("echoai-intelligence-panel");if(existingPanel){existingPanel.style.transition="all 0.3s ease";existingPanel.style.opacity="0";existingPanel.style.transform="translateY(-10px)";setTimeout(()=>{if(existingPanel.parentNode){existingPanel.parentNode.removeChild(existingPanel);}},300);}},checkEscalationTriggers: function(enhancedData){if(!this.config.escalationConfig?.enabled)return;const metadata=enhancedData.intelligence_metadata;if(!metadata)return;const escalationThreshold=this.config.escalationConfig?.escalationThreshold||0.7;let shouldEscalate=false;let escalationReason="";if(metadata.risk_score&&metadata.risk_score>=escalationThreshold){shouldEscalate=true;escalationReason="High risk conversation detected";}if(metadata.escalation_likelihood&&metadata.escalation_likelihood>=escalationThreshold){shouldEscalate=true;escalationReason="High escalation probability detected";}if(metadata.sentiment==="negative"&&metadata.sentiment_score&&metadata.sentiment_score>=escalationThreshold){shouldEscalate=true;escalationReason="Negative sentiment detected";}if(enhancedData.confidence_score&&enhancedData.confidence_score<=1-escalationThreshold){shouldEscalate=true;escalationReason="Low AI confidence in response";}if(shouldEscalate){console.log("EchoAI: Automatic escalation triggered:",escalationReason);this.showEscalationSuggestion(escalationReason,metadata);this.eventManager.emit("escalation-triggered",{reason: escalationReason,metadata: metadata,automatic: true,});}},showEscalationSuggestion: function(reason,metadata){const chatPanel=this.container.querySelector('[data-panel="chat"]');if(!chatPanel)return;const existingSuggestion=chatPanel.querySelector(".echoai-escalation-suggestion");if(existingSuggestion){existingSuggestion.remove();}const suggestionBanner=document.createElement("div");suggestionBanner.className="echoai-escalation-suggestion";suggestionBanner.innerHTML=`<div class="echoai-suggestion-content"><div class="echoai-suggestion-icon"><svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path></svg></div><div class="echoai-suggestion-text"><div class="echoai-suggestion-title">Would you like to speak with a human agent?</div><div class="echoai-suggestion-reason">${this.escapeHtml(reason)}</div></div><div class="echoai-suggestion-actions"><button class="echoai-suggestion-btn echoai-suggestion-accept">Yes,connect me</button><button class="echoai-suggestion-btn echoai-suggestion-dismiss">No,continue</button></div></div>`;const messagesContainer=chatPanel.querySelector(".echoai-messages");if(messagesContainer){chatPanel.insertBefore(suggestionBanner,messagesContainer);}else{chatPanel.insertBefore(suggestionBanner,chatPanel.firstChild);}const acceptBtn=suggestionBanner.querySelector(".echoai-suggestion-accept");const dismissBtn=suggestionBanner.querySelector(".echoai-suggestion-dismiss");this.eventManager.addEventListener(acceptBtn,"click",()=>{this.handleEscalation("automatic_trigger");suggestionBanner.remove();});this.eventManager.addEventListener(dismissBtn,"click",()=>{suggestionBanner.remove();this.eventManager.emit("escalation-suggestion-dismissed",{reason: reason,metadata: metadata,});});setTimeout(()=>{if(suggestionBanner.parentNode){suggestionBanner.remove();}},30000);requestAnimationFrame(()=>{suggestionBanner.style.opacity="0";suggestionBanner.style.transform="translateY(-10px)";suggestionBanner.style.transition="all 0.3s ease";requestAnimationFrame(()=>{suggestionBanner.style.opacity="1";suggestionBanner.style.transform="translateY(0)";});});},showLeadCollectionDialog: function(){const dialog=document.createElement("div");dialog.className="echoai-lead-collection-dialog";dialog.innerHTML=`<div class="echoai-dialog-overlay"><div class="echoai-dialog-content"><div class="echoai-dialog-header"><h3>Contact Information</h3><button class="echoai-dialog-close" aria-label="Close dialog"><svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg></button></div><div class="echoai-dialog-body"><p>Please provide your contact information so we can better assist you:</p><form class="echoai-lead-form">${this.config.leadCollectionConfig?.collectEmail!==false ? `<div class="echoai-form-group"><label for="echoai-lead-email">Email Address*</label><input type="email" id="echoai-lead-email" name="email" required></div>` : ""}${this.config.leadCollectionConfig?.collectPhone ? `<div class="echoai-form-group"><label for="echoai-lead-phone">Phone Number</label><input type="tel" id="echoai-lead-phone" name="phone"></div>` : ""}${this.config.leadCollectionConfig?.collectCompany ? `<div class="echoai-form-group"><label for="echoai-lead-company">Company</label><input type="text" id="echoai-lead-company" name="company"></div>` : ""}</form></div><div class="echoai-dialog-footer"><button class="echoai-btn echoai-btn-secondary echoai-cancel-lead">Cancel</button><button class="echoai-btn echoai-btn-primary echoai-submit-lead">Submit</button></div></div></div>`;document.body.appendChild(dialog);const closeDialog=()=>{dialog.classList.add("echoai-dialog-hiding");setTimeout(()=>{if(dialog.parentNode){dialog.parentNode.removeChild(dialog);}},300);};const closeBtn=dialog.querySelector(".echoai-dialog-close");const cancelBtn=dialog.querySelector(".echoai-cancel-lead");const submitBtn=dialog.querySelector(".echoai-submit-lead");const form=dialog.querySelector(".echoai-lead-form");this.eventManager.addEventListener(closeBtn,"click",closeDialog);this.eventManager.addEventListener(cancelBtn,"click",closeDialog);this.eventManager.addEventListener(submitBtn,"click",async()=>{const formData=new FormData(form);const leadData=Object.fromEntries(formData.entries());if(this.config.leadCollectionConfig?.collectEmail!==false&&!leadData.email){this.uiManager.showNotification("Email address is required","error",3000);return;}try{submitBtn.disabled=true;submitBtn.textContent="Submitting...";this.stateManager.setState({leadCollectionData: leadData});this.eventManager.emit("lead-collected",{leadData});closeDialog();this.uiManager.showNotification("Thank you!Your information has been saved.","success",4000);this.uiManager.addMessage("Thank you for providing your contact information. We'll use this to better assist you.","assistant",null,{isSystemMessage: true});}catch(error){console.error("EchoAI: Lead collection failed:",error);this.uiManager.showNotification("Failed to save your information. Please try again.","error",4000);submitBtn.disabled=false;submitBtn.textContent="Submit";}});requestAnimationFrame(()=>{dialog.classList.add("echoai-dialog-visible");});setTimeout(()=>{const firstInput=form.querySelector("input");if(firstInput){firstInput.focus();}},100);},escapeHtml: function(text){const div=document.createElement("div");div.textContent=text;return div.innerHTML;},attemptFallbackMessage: async function(message,imageUrl,originalError){console.log("EchoAI: Attempting fallback to regular messaging:",originalError.message);try{this.stateManager.setState({isLoading: true});this.uiManager.showTyping();const response=await this.apiClient.sendMessage(message,imageUrl,false);this.uiManager.addMessage(response.response,"assistant");if(response&&this.config.enableEnhancedFeatures){this.handleEnhancedResponse(response);}if(response.conversation_id){this.stateManager.setState({conversationId: response.conversation_id,});}this.uiManager.hideTyping();this.stateManager.setState({isLoading: false});}catch(fallbackError){console.error("EchoAI: Fallback messaging also failed:",fallbackError);this.uiManager.hideTyping();this.stateManager.setState({isLoading: false});this.uiManager.addMessage("I'm having trouble connecting right now. Please try again in a moment.","assistant");this.uiManager.showNotification("Connection error. Please check your internet and try again.","error",5000);}},cancelStreaming: function(){this.apiClient.cancelStreaming();this.stateManager.setState({isStreaming: false});this.uiManager.hideStreamingControls();},sendRegularMessage: async function(message,imageUrl){this.stateManager.setState({isLoading: true});this.uiManager.showTyping();try{const data=await this.apiClient.sendMessage(message,imageUrl,false);this.uiManager.hideTyping();this.uiManager.addMessage(data.response,"assistant");if(data.proactive_questions&&this.config.enableEnhancedFeatures){this.handleEnhancedResponse(data);}if(data.sessionId){this.stateManager.setState({conversationId: data.sessionId});}}catch(error){this.uiManager.hideTyping();throw error;}finally{this.stateManager.setState({isLoading: false});}},handleEnhancedResponse: function(enhancedData){this.stateManager.setState({proactiveQuestions: enhancedData.proactive_questions||[],suggestedTopics: enhancedData.suggested_topics||[],conversationActions: enhancedData.conversation_actions||[],intelligenceMetadata: enhancedData.intelligence_metadata||null,});this.uiManager.updateIntelligencePanel(enhancedData);if(enhancedData.intelligence_metadata&&enhancedData.intelligence_metadata.escalation_risk>this.config.escalationConfig.escalationThreshold){this.handleEscalation("auto_detected");}},handleFileSelection: function(file){const validation=this.uiManager.validateImageFile(file);if(!validation.isValid){validation.errors.forEach((error)=>{this.uiManager.showUploadError(error);});return;}this.uiManager.showImagePreview(file);},loadFAQs: async function(){const faqList=document.getElementById("echoai-faq-list");if(!faqList)return;try{const faqs=await this.apiClient.loadFAQs();this.stateManager.setState({faqs});if(faqs.length===0){faqList.innerHTML='<div class="echoai-no-content">No FAQs available</div>';return;}faqList.innerHTML=faqs .map((faq)=>`<div class="echoai-faq-item" onclick="window.EchoAI.selectFAQ('${faq.question.replace(/'/g,"\\'")}','${faq.answer.replace(/'/g,"\\'")}')"><div class="echoai-faq-question">${faq.question}</div><div class="echoai-faq-answer">${faq.answer}</div></div>`).join("");const searchInput=this.container.querySelector(".echoai-faq-search-input");if(searchInput){this.eventManager.addEventListener(searchInput,"input",(e)=>{const query=e.target.value.toLowerCase();const faqItems=this.container.querySelectorAll(".echoai-faq-item");faqItems.forEach((item)=>{const question=item .querySelector(".echoai-faq-question").textContent.toLowerCase();const answer=item .querySelector(".echoai-faq-answer").textContent.toLowerCase();if(question.includes(query)||answer.includes(query)){item.style.display="block";}else{item.style.display="none";}});});}}catch(error){console.error("EchoAI: Failed to load FAQs:",error);faqList.innerHTML='<div class="echoai-error">Failed to load FAQs</div>';}},selectFAQ: function(question,answer){this.uiManager.switchTab("chat");this.uiManager.addMessage(question,"user");setTimeout(()=>{this.uiManager.addMessage(answer,"assistant");},500);},loadConversationHistory: async function(){const historyList=document.getElementById("echoai-history-list");if(!historyList)return;try{const history=await this.apiClient.loadConversationHistory();this.stateManager.setState({conversationHistory: history});if(history.length===0){historyList.innerHTML='<div class="echoai-no-content">No conversation history</div>';return;}historyList.innerHTML=history .map((item)=>`<div class="echoai-history-item" onclick="window.EchoAI.loadConversation('${item.sessionId}')"><div class="echoai-history-preview">${item.preview}</div><div class="echoai-history-meta"><span class="echoai-history-date">${new Date(item.timestamp).toLocaleDateString()}</span><span class="echoai-history-count">${item.messageCount}messages</span></div></div>`).join("");const searchInput=this.container.querySelector(".echoai-history-search-input");if(searchInput){this.eventManager.addEventListener(searchInput,"input",(e)=>{const query=e.target.value.toLowerCase();const historyItems=this.container.querySelectorAll(".echoai-history-item");historyItems.forEach((item)=>{const preview=item .querySelector(".echoai-history-preview").textContent.toLowerCase();if(preview.includes(query)){item.style.display="block";}else{item.style.display="none";}});});}}catch(error){console.error("EchoAI: Failed to load conversation history:",error);historyList.innerHTML='<div class="echoai-error">Failed to load history</div>';}},loadChatbotSettings: async function(){console.log("EchoAI: Loading enhanced chatbot settings...");this.welcomeMessage=this.config.welcomeMessage||"Hello!How can I help you today?";const fallbackSettings={name: this.config.chatbotName||"AI Assistant",primaryColor: this.config.primaryColor||"#3b82f6",welcomeMessage: this.welcomeMessage,};this.uiManager.applySettings(fallbackSettings);try{const chatbot=await this.apiClient.loadChatbotSettings();console.log("EchoAI: Received enhanced settings:",chatbot);this.uiManager.applySettings(chatbot);this.welcomeMessage=chatbot.welcomeMessage;}catch(error){console.log("EchoAI: Failed to load from API,using embedded settings:",error.message);}},addWelcomeMessage: function(){const welcomeMsg=this.welcomeMessage||"Hello!How can I help you today?";this.uiManager.addMessage(welcomeMsg,"assistant");},loadStyles: function(){if(document.getElementById("echoai-enhanced-styles"))return;const styles=document.createElement("style");styles.id="echoai-enhanced-styles";styles.textContent=this.getStyles();document.head.appendChild(styles);},getStyles: function(){return ` :root{--echoai-primary-color: #3b82f6;--echoai-primary-hover: #2563eb;--echoai-primary-light: #eff6ff;--echoai-text-primary: #374151;--echoai-text-secondary: #6b7280;--echoai-text-muted: #9ca3af;--echoai-background: #ffffff;--echoai-background-secondary: #f8fafc;--echoai-border: #e5e7eb;--echoai-border-light: #f3f4f6;--echoai-shadow: 0 20px 60px rgba(0,0,0,0.15);--echoai-radius: 16px;--echoai-radius-small: 8px;--echoai-spacing-xs: 4px;--echoai-spacing-sm: 8px;--echoai-spacing-md: 12px;--echoai-spacing-lg: 16px;--echoai-spacing-xl: 20px;--echoai-font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,sans-serif;--echoai-transition: all 0.2s ease;--echoai-z-index: 9999;}.echoai-enhanced-widget-container*{box-sizing: border-box;font-family: var(--echoai-font-family);}.echoai-sr-only{position: absolute;width: 1px;height: 1px;padding: 0;margin:-1px;overflow: hidden;clip: rect(0,0,0,0);white-space: nowrap;border: 0;}.echoai-enhanced-widget{width: 380px;height: 600px;background: var(--echoai-background);border-radius: var(--echoai-radius);box-shadow: var(--echoai-shadow);display: flex;flex-direction: column;overflow: hidden;margin-bottom: var(--echoai-spacing-sm);border: 1px solid var(--echoai-border);transition: var(--echoai-transition);}.echoai-header{background: var(--echoai-primary-color);color: white;padding: var(--echoai-spacing-xl);display: flex;align-items: center;justify-content: space-between;border-radius: var(--echoai-radius)var(--echoai-radius)0 0;}.echoai-header-content{display: flex;align-items: center;gap: var(--echoai-spacing-md);}.echoai-bot-avatar{width: 40px;height: 40px;background: rgba(255,255,255,0.2);border-radius: 50%;display: flex;align-items: center;justify-content: center;font-size: 14px;font-weight: 600;}.echoai-bot-name{font-weight: 600;font-size: 16px;margin: 0;}.echoai-bot-status{font-size: 12px;opacity: 0.9;margin: 0;transition: var(--echoai-transition);}.echoai-status-ai{color: rgba(255,255,255,0.9);}.echoai-status-human{color: #fbbf24;font-weight: 600;}.echoai-status-resolved{color: #10b981;font-weight: 600;}.echoai-connection-status{display: flex;align-items: center;gap: var(--echoai-spacing-xs);font-size: 11px;color: rgba(255,255,255,0.8);}.echoai-connection-indicator{display: flex;align-items: center;gap: var(--echoai-spacing-xs);}.echoai-connection-disconnected .echoai-connection-indicator{color: #fbbf24;}.echoai-connection-disconnected .echoai-connection-indicator svg{animation: echoai-pulse 2s infinite;}@keyframes echoai-pulse{0%,100%{opacity: 1;}50%{opacity: 0.5;}}.echoai-human-agent-indicator{background: linear-gradient(135deg,#0ea5e9 0%,#0284c7 100%);color: white;padding: var(--echoai-spacing-md)var(--echoai-spacing-xl);display: flex;align-items: center;gap: var(--echoai-spacing-md);border-bottom: 1px solid rgba(255,255,255,0.1);transform: translateY(-100%);opacity: 0;transition: all 0.3s cubic-bezier(0.4,0,0.2,1);}.echoai-agent-indicator-visible{transform: translateY(0);opacity: 1;}.echoai-agent-indicator-hiding{transform: translateY(-100%);opacity: 0;}.echoai-agent-avatar{width: 32px;height: 32px;background: rgba(255,255,255,0.2);border-radius: 50%;display: flex;align-items: center;justify-content: center;flex-shrink: 0;}.echoai-agent-info{flex: 1;min-width: 0;}.echoai-agent-name{font-weight: 600;font-size: 14px;margin: 0;white-space: nowrap;overflow: hidden;text-overflow: ellipsis;}.echoai-agent-status{font-size: 11px;opacity: 0.9;margin: 0;display: flex;align-items: center;gap: var(--echoai-spacing-xs);}.echoai-status-dot{width: 6px;height: 6px;background: #10b981;border-radius: 50%;animation: echoai-status-pulse 2s infinite;}@keyframes echoai-status-pulse{0%,100%{opacity: 1;transform: scale(1);}50%{opacity: 0.7;transform: scale(1.2);}}.echoai-close-btn{background: none;border: none;color: white;cursor: pointer;padding: var(--echoai-spacing-sm);border-radius: var(--echoai-spacing-sm);transition: var(--echoai-transition);display: flex;align-items: center;justify-content: center;}.echoai-close-btn:hover{background: rgba(255,255,255,0.1);}.echoai-close-btn:focus{outline: 2px solid rgba(255,255,255,0.5);outline-offset: 2px;}.echoai-tabs{display: flex;background: var(--echoai-background-secondary);border-bottom: 1px solid var(--echoai-border);}.echoai-tab{flex: 1;padding: var(--echoai-spacing-md)var(--echoai-spacing-lg);background: none;border: none;cursor: pointer;font-size: 14px;font-weight: 500;color: var(--echoai-text-secondary);transition: var(--echoai-transition);position: relative;}.echoai-tab:hover{background: var(--echoai-border);color: var(--echoai-text-primary);}.echoai-tab:focus{outline: 2px solid var(--echoai-primary-color);outline-offset:-2px;}.echoai-tab-active{background: var(--echoai-primary-color);color: white;}.echoai-tab-content{flex: 1;display: flex;flex-direction: column;overflow: hidden;}.echoai-tab-panel{flex: 1;display: flex;flex-direction: column;overflow: hidden;}.echoai-messages{flex: 1;padding: var(--echoai-spacing-xl);overflow-y: auto;display: flex;flex-direction: column;gap: var(--echoai-spacing-lg);background: var(--echoai-background-secondary);scroll-behavior: smooth;}.echoai-messages::-webkit-scrollbar{width: 6px;}.echoai-messages::-webkit-scrollbar-track{background: transparent;}.echoai-messages::-webkit-scrollbar-thumb{background: var(--echoai-text-muted);border-radius: 3px;opacity: 0.3;}.echoai-messages::-webkit-scrollbar-thumb:hover{opacity: 0.6;}.echoai-message{display: flex;flex-direction: column;max-width: 85%;animation: echoai-message-appear 0.3s ease-out;position: relative;margin-bottom: var(--echoai-spacing-md);}.echoai-message-user{align-self: flex-end;}.echoai-message-assistant,.echoai-message-agent{align-self: flex-start;}.echoai-message-content{background: var(--echoai-background);padding: var(--echoai-spacing-md)var(--echoai-spacing-lg);border-radius: var(--echoai-radius-small);box-shadow: 0 2px 8px rgba(0,0,0,0.1);position: relative;word-wrap: break-word;overflow-wrap: break-word;}.echoai-message-user .echoai-message-content{background: var(--echoai-primary-color);color: white;}.echoai-message-assistant .echoai-message-content{background: var(--echoai-background);color: var(--echoai-text-primary);border: 1px solid var(--echoai-border);}.echoai-message-agent .echoai-message-content{background: #f0f9ff;color: var(--echoai-text-primary);border: 1px solid #0ea5e9;border-left: 4px solid #0ea5e9;}.echoai-message-text{line-height: 1.5;margin: 0;}.echoai-message-text a{color: inherit;text-decoration: underline;}.echoai-message-user .echoai-message-text a{color: rgba(255,255,255,0.9);}.echoai-message-image{margin-bottom: var(--echoai-spacing-sm);}.echoai-message-image img{max-width: 100%;height: auto;border-radius: var(--echoai-radius-small);box-shadow: 0 2px 8px rgba(0,0,0,0.1);}.echoai-message-time{font-size: 11px;color: var(--echoai-text-muted);margin-top: var(--echoai-spacing-xs);text-align: right;}.echoai-message-user .echoai-message-time{text-align: left;}.echoai-message-status{position: absolute;bottom:-18px;right: 0;display: flex;align-items: center;gap: var(--echoai-spacing-xs);font-size: 11px;color: var(--echoai-text-muted);}.echoai-message-user .echoai-message-status{right: auto;left: 0;}.echoai-message-status svg{width: 12px;height: 12px;}.echoai-message-delivered .echoai-message-status{color: #10b981;}.echoai-message-pending .echoai-message-status{color: #f59e0b;}.echoai-message-failed .echoai-message-status{color: #ef4444;}.echoai-message-actions{position: absolute;top: 50%;transform: translateY(-50%);right:-40px;display: flex;flex-direction: column;gap: var(--echoai-spacing-xs);opacity: 0;transition: opacity 0.2s ease;}.echoai-message-user .echoai-message-actions{right: auto;left:-40px;}.echoai-message:hover .echoai-message-actions{opacity: 1;}.echoai-message-action{background: var(--echoai-background);border: 1px solid var(--echoai-border);border-radius: 50%;width: 28px;height: 28px;display: flex;align-items: center;justify-content: center;cursor: pointer;transition: all 0.2s ease;color: var(--echoai-text-secondary);}.echoai-message-action:hover{background: var(--echoai-primary-color);color: white;border-color: var(--echoai-primary-color);transform: scale(1.1);}.echoai-message-action:focus{outline: 2px solid var(--echoai-primary-color);outline-offset: 2px;}.echoai-message-action svg{width: 14px;height: 14px;}.echoai-message-feedback{display: flex;flex-direction: column;gap: var(--echoai-spacing-xs);}.echoai-feedback-btn.echoai-feedback-active{background: var(--echoai-primary-color);color: white;border-color: var(--echoai-primary-color);}.echoai-streaming .echoai-message-content{background: var(--echoai-background);border: 1px solid var(--echoai-border);position: relative;animation: echoai-streaming-pulse 2s infinite ease-in-out;}.echoai-streaming-text{display: inline;word-wrap: break-word;white-space: pre-wrap;}.echoai-streaming-cursor{display: inline-block;margin-left: 2px;color: var(--echoai-primary-color);font-weight: bold;transition: opacity 0.1s ease;}@keyframes echoai-blink{0%,50%{opacity: 1;}51%,100%{opacity: 0;}}@keyframes echoai-streaming-pulse{0%,100%{border-color: var(--echoai-border);}50%{border-color: var(--echoai-primary-color);box-shadow: 0 0 0 1px rgba(59,130,246,0.1);}}.echoai-streaming-controls{display: flex;align-items: center;justify-content: center;padding: var(--echoai-spacing-sm);background: var(--echoai-background-secondary);border-top: 1px solid var(--echoai-border);animation: echoai-slide-up 0.3s ease-out;}.echoai-cancel-streaming-btn{display: flex;align-items: center;gap: var(--echoai-spacing-xs);padding: var(--echoai-spacing-sm)var(--echoai-spacing-md);background: #ef4444;color: white;border: none;border-radius: var(--echoai-radius-small);font-size: 12px;font-weight: 500;cursor: pointer;transition: all 0.2s ease;}.echoai-cancel-streaming-btn:hover{background: #dc2626;transform: translateY(-1px);box-shadow: 0 2px 8px rgba(239,68,68,0.3);}.echoai-cancel-streaming-btn:focus{outline: 2px solid rgba(239,68,68,0.5);outline-offset: 2px;}.echoai-cancel-streaming-btn:active{transform: translateY(0);}.echoai-cancel-streaming-btn svg{width: 14px;height: 14px;}@keyframes echoai-slide-up{from{opacity: 0;transform: translateY(10px);}to{opacity: 1;transform: translateY(0);}}.echoai-typing{align-self: flex-start;max-width: 85%;}.echoai-typing .echoai-message-content{background: var(--echoai-background);border: 1px solid var(--echoai-border);padding: var(--echoai-spacing-lg);}.echoai-typing-indicator{display: flex;gap: 4px;align-items: center;}.echoai-typing-indicator span{width: 8px;height: 8px;border-radius: 50%;background: var(--echoai-text-muted);animation: echoai-typing-bounce 1.4s infinite ease-in-out;}.echoai-typing-indicator span:nth-child(1){animation-delay:-0.32s;}.echoai-typing-indicator span:nth-child(2){animation-delay:-0.16s;}@keyframes echoai-typing-bounce{0%,80%,100%{transform: scale(0.8);opacity: 0.5;}40%{transform: scale(1);opacity: 1;}}.echoai-toast{position: fixed;top: 20px;right: 20px;z-index: 10000;padding: 12px 16px;border-radius: 8px;font-size: 14px;font-weight: 500;box-shadow: 0 4px 12px rgba(0,0,0,0.15);transition: transform 0.3s ease;max-width: 300px;}.echoai-toast-success{background: #10b981;color: white;}.echoai-toast-info{background: #3b82f6;color: white;}.echoai-toast-error{background: #ef4444;color: white;}.echoai-messages.echoai-virtual-scrolling{contain: layout style paint;}.echoai-virtual-spacer{flex-shrink: 0;}@keyframes echoai-message-appear{from{opacity: 0;transform: translateY(10px);}to{opacity: 1;transform: translateY(0);}}@media(max-width: 480px){.echoai-message{max-width: 95%;}.echoai-message-actions{position: static;transform: none;opacity: 1;flex-direction: row;justify-content: flex-end;margin-top: var(--echoai-spacing-sm);gap: var(--echoai-spacing-sm);}.echoai-message-user .echoai-message-actions{justify-content: flex-start;}.echoai-message-feedback{flex-direction: row;}}@media(prefers-contrast: high){.echoai-message-content{border-width: 2px;}.echoai-message-action{border-width: 2px;}.echoai-message-status svg{stroke-width: 3;}}@media(prefers-reduced-motion: reduce){.echoai-message{animation: none;}.echoai-streaming-cursor{animation: none;}.echoai-typing-indicator span{animation: none;}.echoai-message-action{transition: none;}.echoai-toast{transition: none;}}@keyframes echoai-message-appear{from{opacity: 0;transform: translateY(10px);}to{opacity: 1;transform: translateY(0);}}.echoai-message-user{align-self: flex-end;align-items: flex-end;}.echoai-message-assistant{align-self: flex-start;align-items: flex-start;}.echoai-message-image{margin-bottom: var(--echoai-spacing-sm);}.echoai-message-image img{max-width: 200px;border-radius: var(--echoai-radius-small);box-shadow: 0 2px 8px rgba(0,0,0,0.1);}.echoai-message-content{padding: var(--echoai-spacing-md)var(--echoai-spacing-lg);border-radius: 18px;font-size: 14px;line-height: 1.5;word-wrap: break-word;position: relative;transition: var(--echoai-transition);}.echoai-message-user .echoai-message-content{background: var(--echoai-primary-color);color: white;border-bottom-right-radius: 6px;}.echoai-message-assistant .echoai-message-content{background: var(--echoai-background);color: var(--echoai-text-primary);border: 1px solid var(--echoai-border);border-bottom-left-radius: 6px;}.echoai-message-time{font-size: 11px;color: var(--echoai-text-muted);margin-top: var(--echoai-spacing-xs);padding: 0 var(--echoai-spacing-xs);}.echoai-streaming .echoai-cursor{animation: echoai-blink 1s infinite;margin-left: 2px;}@keyframes echoai-blink{0%,50%{opacity: 1;}51%,100%{opacity: 0;}}.echoai-typing-indicator{display: flex;gap: var(--echoai-spacing-xs);align-items: center;padding: var(--echoai-spacing-xs)0;}.echoai-typing-indicator span{width: 8px;height: 8px;background: var(--echoai-text-muted);border-radius: 50%;animation: echoai-bounce 1.4s infinite ease-in-out;}.echoai-typing-indicator span:nth-child(1){animation-delay:-0.32s;}.echoai-typing-indicator span:nth-child(2){animation-delay:-0.16s;}@keyframes echoai-bounce{0%,80%,100%{transform: scale(0.8);opacity: 0.5;}40%{transform: scale(1);opacity: 1;}}.echoai-intelligence-panel{padding: var(--echoai-spacing-lg)var(--echoai-spacing-xl);background: var(--echoai-primary-light);border-top: 1px solid var(--echoai-border);transition: all 0.3s ease;}.echoai-intelligence-section{margin-bottom: var(--echoai-spacing-lg);}.echoai-intelligence-section:last-child{margin-bottom: 0;}.echoai-intelligence-section h4{font-size: 12px;font-weight: 600;color: var(--echoai-text-secondary);margin: 0 0 var(--echoai-spacing-sm)0;text-transform: uppercase;letter-spacing: 0.5px;}.echoai-question-buttons,.echoai-topic-buttons,.echoai-action-buttons{display: flex;flex-wrap: wrap;gap: var(--echoai-spacing-sm);}.echoai-proactive-btn,.echoai-topic-btn,.echoai-action-btn{padding: var(--echoai-spacing-sm)var(--echoai-spacing-md);background: var(--echoai-background);border: 1px solid var(--echoai-border);border-radius: var(--echoai-spacing-md);font-size: 12px;cursor: pointer;transition: var(--echoai-transition);color: var(--echoai-text-primary);position: relative;display: flex;align-items: center;gap: var(--echoai-spacing-xs);}.echoai-proactive-btn:hover,.echoai-topic-btn:hover,.echoai-action-btn:hover{background: var(--echoai-primary-color);color: white;border-color: var(--echoai-primary-color);transform: translateY(-1px);box-shadow: 0 2px 8px rgba(59,130,246,0.3);}.echoai-proactive-btn:focus,.echoai-topic-btn:focus,.echoai-action-btn:focus{outline: 2px solid var(--echoai-primary-color);outline-offset: 2px;}.echoai-confidence-score{font-size: 10px;background: rgba(59,130,246,0.1);color: var(--echoai-primary-color);padding: 2px 6px;border-radius: 10px;font-weight: 600;margin-left: auto;}.echoai-action-btn:hover .echoai-confidence-score{background: rgba(255,255,255,0.2);color: white;}.echoai-intelligence-metrics{display: flex;flex-wrap: wrap;gap: var(--echoai-spacing-sm);}.echoai-metric{font-size: 11px;background: var(--echoai-background);border: 1px solid var(--echoai-border);padding: var(--echoai-spacing-xs)var(--echoai-spacing-sm);border-radius: var(--echoai-spacing-sm);color: var(--echoai-text-secondary);}.echoai-debug-section{opacity: 0.8;font-size: 11px;}.echoai-escalation-suggestion{background: linear-gradient(135deg,#fef3c7 0%,#fde68a 100%);border: 1px solid #f59e0b;border-radius: var(--echoai-radius-small);margin: var(--echoai-spacing-md)var(--echoai-spacing-xl);overflow: hidden;transition: all 0.3s ease;}.echoai-suggestion-content{display: flex;align-items: center;padding: var(--echoai-spacing-md);gap: var(--echoai-spacing-md);}.echoai-suggestion-icon{flex-shrink: 0;width: 40px;height: 40px;background: rgba(245,158,11,0.2);border-radius: 50%;display: flex;align-items: center;justify-content: center;color: #d97706;}.echoai-suggestion-text{flex: 1;min-width: 0;}.echoai-suggestion-title{font-weight: 600;color: #92400e;margin-bottom: var(--echoai-spacing-xs);}.echoai-suggestion-reason{font-size: 12px;color: #a16207;}.echoai-suggestion-actions{display: flex;gap: var(--echoai-spacing-sm);flex-shrink: 0;}.echoai-suggestion-btn{padding: var(--echoai-spacing-sm)var(--echoai-spacing-md);border: none;border-radius: var(--echoai-spacing-sm);font-size: 12px;font-weight: 500;cursor: pointer;transition: all 0.2s ease;}.echoai-suggestion-accept{background: #d97706;color: white;}.echoai-suggestion-accept:hover{background: #b45309;transform: translateY(-1px);}.echoai-suggestion-dismiss{background: transparent;color: #92400e;border: 1px solid #d97706;}.echoai-suggestion-dismiss:hover{background: rgba(217,119,6,0.1);}.echoai-lead-collection-dialog .echoai-dialog-content{max-width: 400px;}.echoai-lead-form{display: flex;flex-direction: column;gap: var(--echoai-spacing-md);}.echoai-form-group{display: flex;flex-direction: column;gap: var(--echoai-spacing-xs);}.echoai-form-group label{font-size: 14px;font-weight: 500;color: var(--echoai-text-primary);}.echoai-form-group input{padding: var(--echoai-spacing-sm)var(--echoai-spacing-md);border: 1px solid var(--echoai-border);border-radius: var(--echoai-spacing-sm);font-size: 14px;transition: border-color 0.2s ease;background: var(--echoai-background);color: var(--echoai-text-primary);}.echoai-form-group input:focus{outline: none;border-color: var(--echoai-primary-color);box-shadow: 0 0 0 3px var(--echoai-primary-light);}.echoai-form-group input:invalid{border-color: #ef4444;}.echoai-escalation-dialog,.echoai-lead-collection-dialog{position: fixed;top: 0;left: 0;right: 0;bottom: 0;z-index: 10000;display: flex;align-items: center;justify-content: center;opacity: 0;transition: opacity 0.3s ease;}.echoai-dialog-visible{opacity: 1;}.echoai-dialog-hiding{opacity: 0;}.echoai-dialog-overlay{position: absolute;top: 0;left: 0;right: 0;bottom: 0;background: rgba(0,0,0,0.5);backdrop-filter: blur(4px);}.echoai-dialog-content{position: relative;background: var(--echoai-background);border-radius: var(--echoai-radius);box-shadow: 0 20px 60px rgba(0,0,0,0.3);max-width: 500px;width: 90%;max-height: 80vh;overflow: hidden;transform: scale(0.95);transition: transform 0.3s ease;}.echoai-dialog-visible .echoai-dialog-content{transform: scale(1);}.echoai-dialog-header{display: flex;align-items: center;justify-content: space-between;padding: var(--echoai-spacing-xl);border-bottom: 1px solid var(--echoai-border);background: var(--echoai-background-secondary);}.echoai-dialog-header h3{margin: 0;font-size: 18px;font-weight: 600;color: var(--echoai-text-primary);}.echoai-dialog-close{background: none;border: none;cursor: pointer;padding: var(--echoai-spacing-sm);border-radius: var(--echoai-spacing-sm);color: var(--echoai-text-secondary);transition: all 0.2s ease;}.echoai-dialog-close:hover{background: var(--echoai-border);color: var(--echoai-text-primary);}.echoai-dialog-body{padding: var(--echoai-spacing-xl);}.echoai-dialog-body p{margin: 0 0 var(--echoai-spacing-md)0;color: var(--echoai-text-secondary);line-height: 1.5;}.echoai-dialog-footer{display: flex;gap: var(--echoai-spacing-md);justify-content: flex-end;padding: var(--echoai-spacing-xl);border-top: 1px solid var(--echoai-border);background: var(--echoai-background-secondary);}.echoai-btn{padding: var(--echoai-spacing-sm)var(--echoai-spacing-lg);border: none;border-radius: var(--echoai-spacing-sm);font-size: 14px;font-weight: 500;cursor: pointer;transition: all 0.2s ease;display: flex;align-items: center;gap: var(--echoai-spacing-xs);}.echoai-btn-primary{background: var(--echoai-primary-color);color: white;}.echoai-btn-primary:hover{background: var(--echoai-primary-hover);transform: translateY(-1px);}.echoai-btn-primary:disabled{background: var(--echoai-text-muted);cursor: not-allowed;transform: none;}.echoai-btn-secondary{background: var(--echoai-background);color: var(--echoai-text-primary);border: 1px solid var(--echoai-border);}.echoai-btn-secondary:hover{background: var(--echoai-background-secondary);border-color: var(--echoai-text-secondary);}@media(max-width: 480px){.echoai-intelligence-panel{padding: var(--echoai-spacing-md);}.echoai-suggestion-content{flex-direction: column;align-items: flex-start;gap: var(--echoai-spacing-md);}.echoai-suggestion-actions{width: 100%;justify-content: stretch;}.echoai-suggestion-btn{flex: 1;}.echoai-dialog-content{width: 95%;margin: var(--echoai-spacing-md);}.echoai-dialog-header,.echoai-dialog-body,.echoai-dialog-footer{padding: var(--echoai-spacing-md);}}.echoai-input-container{padding: var(--echoai-spacing-xl);border-top: 1px solid var(--echoai-border);background: var(--echoai-background);position: sticky;bottom: 0;flex-shrink: 0;}.echoai-image-upload{margin-bottom: var(--echoai-spacing-md);padding: var(--echoai-spacing-md);background: var(--echoai-background-secondary);border-radius: var(--echoai-radius-small);position: relative;}.echoai-remove-image{position: absolute;top: var(--echoai-spacing-xs);right: var(--echoai-spacing-xs);background: rgba(0,0,0,0.5);color: white;border: none;border-radius: 50%;width: 24px;height: 24px;cursor: pointer;font-size: 14px;display: flex;align-items: center;justify-content: center;transition: var(--echoai-transition);}.echoai-remove-image:hover{background: rgba(0,0,0,0.7);}.echoai-image-preview-container{display: flex;align-items: center;gap: var(--echoai-spacing-md);}.echoai-preview-image{max-width: 100px;max-height: 100px;border-radius: var(--echoai-radius-small);object-fit: cover;}.echoai-image-info{display: flex;flex-direction: column;gap: var(--echoai-spacing-xs);}.echoai-image-name{font-weight: 500;color: var(--echoai-text-primary);font-size: 14px;}.echoai-image-size{color: var(--echoai-text-muted);font-size: 12px;}.echoai-upload-progress{margin-top: var(--echoai-spacing-sm);}.echoai-progress-bar{width: 100%;height: 4px;background: var(--echoai-border-light);border-radius: 2px;overflow: hidden;margin-bottom: var(--echoai-spacing-xs);}.echoai-progress-fill{height: 100%;background: var(--echoai-primary-color);transition: width 0.3s ease;width: 0%;}.echoai-progress-text{font-size: 12px;color: var(--echoai-text-muted);}.echoai-drag-drop-area{position: absolute;top: 0;left: 0;right: 0;bottom: 0;background: rgba(59,130,246,0.1);border: 2px dashed var(--echoai-primary-color);border-radius: var(--echoai-radius);display: flex;align-items: center;justify-content: center;z-index: 1000;}.echoai-drag-drop-content{text-align: center;padding: var(--echoai-spacing-xl);}.echoai-drag-drop-content svg{color: var(--echoai-primary-color);margin-bottom: var(--echoai-spacing-md);}.echoai-drag-drop-content p{margin: 0 0 var(--echoai-spacing-xs)0;color: var(--echoai-text-primary);font-weight: 500;}.echoai-browse-btn{background: none;border: none;color: var(--echoai-primary-color);text-decoration: underline;cursor: pointer;font-size: inherit;padding: 0;}.echoai-browse-btn:hover{color: var(--echoai-primary-hover);}.echoai-drag-drop-content small{color: var(--echoai-text-muted);font-size: 12px;}.echoai-drag-over{background: rgba(59,130,246,0.05);}.echoai-notification{position: fixed;top: 20px;right: 20px;padding: var(--echoai-spacing-md)var(--echoai-spacing-lg);border-radius: var(--echoai-radius-small);color: white;font-weight: 500;z-index: 10000;max-width: 300px;display: none;}.echoai-notification-error{background: #ef4444;}.echoai-notification-success{background: #10b981;}.echoai-notification-info{background: var(--echoai-primary-color);}.echoai-input-row{display: flex;gap: var(--echoai-spacing-sm);align-items: center;}.echoai-input{flex: 1;padding: var(--echoai-spacing-md)var(--echoai-spacing-lg);border: 2px solid var(--echoai-border);border-radius: 24px;outline: none;font-size: 14px;transition: var(--echoai-transition);background: var(--echoai-background);color: var(--echoai-text-primary);}.echoai-input:focus{border-color: var(--echoai-primary-color);box-shadow: 0 0 0 3px var(--echoai-primary-light);}.echoai-input::placeholder{color: var(--echoai-text-muted);}.echoai-upload-btn,.echoai-escalate-btn,.echoai-send-btn{width: 40px;height: 40px;border: none;border-radius: 50%;cursor: pointer;display: flex;align-items: center;justify-content: center;transition: var(--echoai-transition);flex-shrink: 0;}.echoai-upload-btn,.echoai-escalate-btn{background: var(--echoai-border-light);color: var(--echoai-text-secondary);}.echoai-upload-btn:hover,.echoai-escalate-btn:hover{background: var(--echoai-border);color: var(--echoai-text-primary);transform: scale(1.05);}.echoai-upload-btn:focus,.echoai-escalate-btn:focus{outline: 2px solid var(--echoai-primary-color);outline-offset: 2px;}.echoai-send-btn{background: var(--echoai-primary-color);color: white;}.echoai-send-btn:hover{background: var(--echoai-primary-hover);transform: scale(1.05);}.echoai-send-btn:focus{outline: 2px solid var(--echoai-primary-light);outline-offset: 2px;}.echoai-send-btn:disabled{background: var(--echoai-text-muted);cursor: not-allowed;transform: none;}.echoai-toggle-btn{width: 64px;height: 64px;background: var(--echoai-primary-color);color: white;border: none;border-radius: 50%;cursor: pointer;display: flex;align-items: center;justify-content: center;box-shadow: 0 8px 32px rgba(59,130,246,0.3);transition: var(--echoai-transition);z-index: var(--echoai-z-index);}.echoai-toggle-btn:hover{transform: scale(1.05);box-shadow: 0 12px 40px rgba(59,130,246,0.4);}.echoai-toggle-btn:focus{outline: 3px solid var(--echoai-primary-light);outline-offset: 3px;}.echoai-faq-container,.echoai-history-container{flex: 1;display: flex;flex-direction: column;overflow: hidden;}.echoai-faq-search,.echoai-history-search{padding: var(--echoai-spacing-lg)var(--echoai-spacing-xl);border-bottom: 1px solid var(--echoai-border);background: var(--echoai-background);}.echoai-faq-search-input,.echoai-history-search-input{width: 100%;padding: var(--echoai-spacing-sm)var(--echoai-spacing-md);border: 1px solid var(--echoai-border);border-radius: var(--echoai-spacing-sm);font-size: 14px;background: var(--echoai-background);color: var(--echoai-text-primary);transition: var(--echoai-transition);}.echoai-faq-search-input:focus,.echoai-history-search-input:focus{outline: none;border-color: var(--echoai-primary-color);box-shadow: 0 0 0 3px var(--echoai-primary-light);}.echoai-faq-list,.echoai-history-list{flex: 1;overflow-y: auto;padding: 0 var(--echoai-spacing-xl)var(--echoai-spacing-xl);}.echoai-faq-item,.echoai-history-item{padding: var(--echoai-spacing-lg);border: 1px solid var(--echoai-border);border-radius: var(--echoai-radius-small);margin-bottom: var(--echoai-spacing-md);cursor: pointer;transition: var(--echoai-transition);background: var(--echoai-background);}.echoai-faq-item:hover,.echoai-history-item:hover{background: var(--echoai-background-secondary);border-color: var(--echoai-primary-color);transform: translateY(-1px);box-shadow: 0 4px 12px rgba(0,0,0,0.1);}.echoai-faq-item:focus,.echoai-history-item:focus{outline: 2px solid var(--echoai-primary-color);outline-offset: 2px;}.echoai-faq-question{font-weight: 600;color: var(--echoai-text-primary);margin-bottom: var(--echoai-spacing-sm);}.echoai-faq-answer{font-size: 14px;color: var(--echoai-text-secondary);line-height: 1.5;}.echoai-faq-header{padding: var(--echoai-spacing-xl);text-align: center;border-bottom: 1px solid var(--echoai-border);background: var(--echoai-background);}.echoai-faq-title{margin: 0 0 var(--echoai-spacing-sm)0;font-size: 18px;font-weight: 600;color: var(--echoai-text-primary);}.echoai-faq-subtitle{margin: 0;font-size: 14px;color: var(--echoai-text-secondary);}.echoai-search-input-container{position: relative;display: flex;align-items: center;}.echoai-search-icon{position: absolute;right: var(--echoai-spacing-md);color: var(--echoai-text-muted);pointer-events: none;}.echoai-faq-content{flex: 1;overflow: hidden;display: flex;flex-direction: column;}.echoai-faq-category-section{margin-bottom: var(--echoai-spacing-xl);}.echoai-faq-category-title{margin: 0 0 var(--echoai-spacing-md)0;padding: var(--echoai-spacing-sm)0;font-size: 16px;font-weight: 600;color: var(--echoai-primary-color);border-bottom: 2px solid var(--echoai-primary-light);position: sticky;top: 0;background: var(--echoai-background);z-index: 1;}.echoai-faq-category-items{display: flex;flex-direction: column;gap: var(--echoai-spacing-md);}.echoai-faq-meta{display: flex;justify-content: space-between;align-items: center;margin-top: var(--echoai-spacing-sm);padding-top: var(--echoai-spacing-sm);border-top: 1px solid var(--echoai-border-light);font-size: 12px;}.echoai-faq-category{background: var(--echoai-primary-light);color: var(--echoai-primary-color);padding: 2px var(--echoai-spacing-sm);border-radius: var(--echoai-spacing-xs);font-weight: 500;}.echoai-faq-popularity{margin-left: var(--echoai-spacing-sm);font-size: 14px;}.echoai-faq-views,.echoai-faq-helpful{color: var(--echoai-text-muted);margin-left: var(--echoai-spacing-sm);}.echoai-faq-search-results{padding: var(--echoai-spacing-md)0;}.echoai-faq-search-header{padding: var(--echoai-spacing-md)0;font-size: 14px;color: var(--echoai-text-secondary);border-bottom: 1px solid var(--echoai-border-light);margin-bottom: var(--echoai-spacing-md);}.echoai-faq-item-hover{background: var(--echoai-background-secondary)!important;border-color: var(--echoai-primary-color)!important;}.echoai-error-retry{margin-top: var(--echoai-spacing-md);padding: var(--echoai-spacing-sm)var(--echoai-spacing-md);background: var(--echoai-primary-color);color: white;border: none;border-radius: var(--echoai-spacing-sm);cursor: pointer;font-size: 14px;transition: var(--echoai-transition);}.echoai-error-retry:hover{background: var(--echoai-primary-dark);}.echoai-no-content-icon,.echoai-error-icon{font-size: 48px;margin-bottom: var(--echoai-spacing-md);}.echoai-no-content-title,.echoai-error-title{font-size: 16px;font-weight: 600;color: var(--echoai-text-primary);margin-bottom: var(--echoai-spacing-sm);}.echoai-no-content-message,.echoai-error-message{font-size: 14px;color: var(--echoai-text-secondary);line-height: 1.5;}.echoai-history-preview{font-weight: 500;color: var(--echoai-text-primary);margin-bottom: var(--echoai-spacing-sm);}.echoai-history-meta{display: flex;justify-content: space-between;font-size: 12px;color: var(--echoai-text-muted);}.echoai-history-pagination{padding: var(--echoai-spacing-lg);border-top: 1px solid var(--echoai-border);background: var(--echoai-background-secondary);}.echoai-load-more-btn{width: 100%;padding: var(--echoai-spacing-md);background: var(--echoai-primary-color);color: white;border: none;border-radius: var(--echoai-border-radius);cursor: pointer;font-size: 14px;font-weight: 500;transition: all 0.2s ease;}.echoai-load-more-btn:hover:not(:disabled){background: var(--echoai-primary-dark);transform: translateY(-1px);}.echoai-load-more-btn:disabled{opacity: 0.6;cursor: not-allowed;transform: none;}.echoai-pagination-info{margin-top: var(--echoai-spacing-sm);text-align: center;}.echoai-pagination-text{font-size: 12px;color: var(--echoai-text-muted);}.echoai-search-highlight{background: var(--echoai-primary-light);color: var(--echoai-primary-dark);padding: 1px 2px;border-radius: 2px;font-weight: 500;}.echoai-search-no-results{padding: var(--echoai-spacing-xl);text-align: center;}.echoai-clear-search{margin-top: var(--echoai-spacing-md);padding: var(--echoai-spacing-sm)var(--echoai-spacing-md);background: var(--echoai-primary-color);color: white;border: none;border-radius: var(--echoai-border-radius);cursor: pointer;font-size: 12px;}.echoai-clear-search:hover{background: var(--echoai-primary-dark);}.echoai-history-item-loading{opacity: 0.6;pointer-events: none;}.echoai-history-item-hover{transform: translateY(-1px);box-shadow: 0 2px 8px rgba(0,0,0,0.1);}.echoai-branding{padding: var(--echoai-spacing-md)var(--echoai-spacing-xl);text-align: center;font-size: 11px;color: var(--echoai-text-muted);border-top: 1px solid var(--echoai-border);background: var(--echoai-background-secondary);}.echoai-streaming .echoai-cursor{animation: echoai-blink 1s infinite;margin-left: 2px;}@keyframes echoai-blink{0%,50%{opacity: 1;}51%,100%{opacity: 0;}}.echoai-typing-indicator{display: flex;gap: 4px;align-items: center;padding: 4px 0;}.echoai-typing-indicator span{width: 8px;height: 8px;background: #9ca3af;border-radius: 50%;animation: echoai-bounce 1.4s infinite ease-in-out;}.echoai-typing-indicator span:nth-child(1){animation-delay:-0.32s;}.echoai-typing-indicator span:nth-child(2){animation-delay:-0.16s;}@keyframes echoai-bounce{0%,80%,100%{transform: scale(0.8);opacity: 0.5;}40%{transform: scale(1);opacity: 1;}}.echoai-intelligence-panel{padding: 16px 20px;background: #f1f5f9;border-top: 1px solid #e2e8f0;}.echoai-intelligence-section{margin-bottom: 16px;}.echoai-intelligence-section h4{font-size: 12px;font-weight: 600;color: #475569;margin: 0 0 8px 0;text-transform: uppercase;letter-spacing: 0.5px;}.echoai-question-buttons,.echoai-topic-buttons,.echoai-action-buttons{display: flex;flex-wrap: wrap;gap: 6px;}.echoai-proactive-btn,.echoai-topic-btn,.echoai-action-btn{padding: 6px 12px;background: white;border: 1px solid #d1d5db;border-radius: 12px;font-size: 12px;cursor: pointer;transition: all 0.2s;color: #374151;}.echoai-proactive-btn:hover,.echoai-topic-btn:hover,.echoai-action-btn:hover{background: #3b82f6;color: white;border-color: #3b82f6;}.echoai-input-container{padding: 20px;border-top: 1px solid #e5e7eb;background: white;position: sticky;bottom: 0;flex-shrink: 0;}.echoai-image-upload{margin-bottom: 12px;padding: 12px;background: #f8fafc;border-radius: 8px;position: relative;}.echoai-remove-image{position: absolute;top: 4px;right: 4px;background: rgba(0,0,0,0.5);color: white;border: none;border-radius: 50%;width: 24px;height: 24px;cursor: pointer;font-size: 14px;}.echoai-input-row{display: flex;gap: 8px;align-items: center;}.echoai-input{flex: 1;padding: 12px 16px;border: 2px solid #e5e7eb;border-radius: 24px;outline: none;font-size: 14px;transition: border-color 0.2s;}.echoai-input:focus{border-color: #3b82f6;}.echoai-upload-btn,.echoai-escalate-btn,.echoai-send-btn{width: 40px;height: 40px;border: none;border-radius: 50%;cursor: pointer;display: flex;align-items: center;justify-content: center;transition: all 0.2s;}.echoai-upload-btn,.echoai-escalate-btn{background: #f3f4f6;color: #6b7280;}.echoai-upload-btn:hover,.echoai-escalate-btn:hover{background: #e5e7eb;color: #374151;}.echoai-send-btn{background: #3b82f6;color: white;}.echoai-send-btn:hover{background: #2563eb;}.echoai-send-btn:disabled{background: #9ca3af;cursor: not-allowed;}.echoai-toggle-btn{width: 64px;height: 64px;background: #3b82f6;color: white;border: none;border-radius: 50%;cursor: pointer;display: flex;align-items: center;justify-content: center;box-shadow: 0 8px 32px rgba(59,130,246,0.3);transition: all 0.3s;}.echoai-toggle-btn:hover{transform: scale(1.05);box-shadow: 0 12px 40px rgba(59,130,246,0.4);}`;},};})();